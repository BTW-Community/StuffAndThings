diff --git a/minecraft/net/minecraft/src/EntityCreature.java b/minecraft/net/minecraft/src/EntityCreature.java
index 74bb74e..5de5cdb 100644
--- a/minecraft/net/minecraft/src/EntityCreature.java
+++ b/minecraft/net/minecraft/src/EntityCreature.java
@@ -43,7 +43,7 @@ public abstract class EntityCreature extends EntityLiving
 		}
 
 		this.hasAttacked = this.isMovementCeased();
-		float var1 = 16.0F;
+		float var1 = 32.0F;
 
 		if (this.entityToAttack == null)
 		{
diff --git a/minecraft/net/minecraft/src/EntityCreeper.java b/minecraft/net/minecraft/src/EntityCreeper.java
index 5252d4f..ce30c71 100644
--- a/minecraft/net/minecraft/src/EntityCreeper.java
+++ b/minecraft/net/minecraft/src/EntityCreeper.java
@@ -140,11 +140,11 @@ public class EntityCreeper extends EntityMob
 
 					if (this.getPowered())
 					{
-						this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, (float)(this.explosionRadius * 2), var2);
+						this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, (float)(this.explosionRadius * 2), YYStuffAndThings.yyCreeperFire, var2);
 					}
 					else
 					{
-						this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, (float)this.explosionRadius, var2);
+						this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, (float)this.explosionRadius, YYStuffAndThings.yyCreeperFire, var2);
 					}
 
 					this.setDead();
diff --git a/minecraft/net/minecraft/src/EntityFishHook.java b/minecraft/net/minecraft/src/EntityFishHook.java
index b732510..68fb886 100644
--- a/minecraft/net/minecraft/src/EntityFishHook.java
+++ b/minecraft/net/minecraft/src/EntityFishHook.java
@@ -580,7 +580,7 @@ public class EntityFishHook extends Entity
 
 		for ( int iTempI = i - 2; iTempI <= i + 2; iTempI++ )
 		{
-			for ( int iTempJ = j - 2; iTempJ <= j; iTempJ++ )
+			for ( int iTempJ = j - 1; iTempJ <= j; iTempJ++ )
 			{
 				for ( int iTempK = k - 2; iTempK <= k + 2; iTempK++ )
 				{
@@ -622,7 +622,7 @@ public class EntityFishHook extends Entity
 					{
 						// in the rain
 						
-						iBiteOdds /= 2;
+						iBiteOdds /= 20;
 					}
 				}
 			}
@@ -641,7 +641,7 @@ public class EntityFishHook extends Entity
 				{
 					// in the rain
 					
-					iBiteOdds /= 2;
+					iBiteOdds /= 6;
 				}
 			}
 	
diff --git a/minecraft/net/minecraft/src/EntityItem.java b/minecraft/net/minecraft/src/EntityItem.java
index 98e5268..a6f7568 100644
--- a/minecraft/net/minecraft/src/EntityItem.java
+++ b/minecraft/net/minecraft/src/EntityItem.java
@@ -752,7 +752,7 @@ public class EntityItem extends Entity
 		// using getTotalWorldTime() here so that /time commands and time advancement due to HC Spawn don't affect it
 		
 		if (!worldObj.isRemote) {
-			m_lAbsoluteItemDespawnTime = MinecraftServer.getServer().worldServers[0].getTotalWorldTime() + 24000L;
+			m_lAbsoluteItemDespawnTime = MinecraftServer.getServer().worldServers[0].getTotalWorldTime() + 14400000L;
 		}
 	}
 	
diff --git a/minecraft/net/minecraft/src/EntityPlayer.java b/minecraft/net/minecraft/src/EntityPlayer.java
index 2d298d0..3b94db0 100644
--- a/minecraft/net/minecraft/src/EntityPlayer.java
+++ b/minecraft/net/minecraft/src/EntityPlayer.java
@@ -15,6 +15,7 @@ import net.minecraft.src.EntityPlayer.BeaconRespawnValidationResult.BeaconStatus
 
 public abstract class EntityPlayer extends EntityLiving implements ICommandSender
 {
+	public static final int YY_EXTRA_HEALTH = 20;
 	/** Inventory of the player */
 	public InventoryPlayer inventory = new InventoryPlayer(this);
 	private InventoryEnderChest theInventoryEnderChest = new InventoryEnderChest();
@@ -130,7 +131,7 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 
 	public int getMaxHealth()
 	{
-		return 20;
+		return 20+YY_EXTRA_HEALTH;
 	}
 
 	protected void entityInit()
@@ -2542,13 +2543,13 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	@Override
 	public boolean CanJump()
 	{		
-		return health > 4 && foodStats.getFoodLevel() > 12 && (int)foodStats.getSaturationLevel() < 18;
+		return this.GetHealthPenaltyLevel() <= 3 && this.GetHungerPenaltyLevel() <= 2 && this.GetFatPenaltyLevel() <= 3;
 	}
 	
 	@Override
 	public boolean CanSwim()
 	{		
-		return !isWeighted() && health > 4;
+		return !this.isWeighted() && this.GetHealthPenaltyLevel() <= 3;
 	}
 	
 	@Override
@@ -2760,7 +2761,7 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	
 	public boolean HasStatusPenalty()
 	{
-		return getHealth() <= 10 || foodStats.getFoodLevel() <= 24 || (int)foodStats.getSaturationLevel() >= 12;
+		return this.GetHealthPenaltyLevel() > 0 || this.GetHungerPenaltyLevel() > 0 || this.GetFatPenaltyLevel() > 0;
 	}
 	
 	public int GetMaximumStatusPenaltyLevel()
@@ -3255,13 +3256,16 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	protected boolean IsPlayerHoldingSail()
 	{
 		ItemStack currentItemStack = inventory.mainInventory[inventory.currentItem];
-		
-		if ( currentItemStack != null )
-		{
-			return currentItemStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID;
-		}
-		
-		return false;
+		int slot = inventory.currentItem;
+		ItemStack nextStack = inventory.getStackInSlot((slot+1)%9);
+		ItemStack prevStack = inventory.getStackInSlot((slot+8)%9);
+		
+		boolean o = inventory.getCurrentItem() != null &&
+			inventory.getCurrentItem().itemID == Item.map.itemID &&(
+				(nextStack != null && nextStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID) ||
+				(prevStack != null && prevStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID)
+			);
+		return (currentItemStack != null ? currentItemStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID : false) || o;
 	}
 	
 	@Override
diff --git a/minecraft/net/minecraft/src/EntityPlayerMP.java b/minecraft/net/minecraft/src/EntityPlayerMP.java
index c47163d..444ef77 100644
--- a/minecraft/net/minecraft/src/EntityPlayerMP.java
+++ b/minecraft/net/minecraft/src/EntityPlayerMP.java
@@ -1245,89 +1245,89 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 
 	@Override
 	protected void UpdateFatPenaltyLevel()
-	{
-		int iFat = (int)foodStats.getSaturationLevel();
-		int iFatLevel = 4;
-		
-		if ( iFat < 12 )
-		{
-			iFatLevel = 0;
-		}
-		else if ( iFat < 14 )
-		{
-			iFatLevel = 1;
-		}
-		else if ( iFat < 16 )
-		{
-			iFatLevel = 2;
-		}
-		else if ( iFat < 18 )
-		{
-			iFatLevel = 3;
-		}
-		
-		SetFatPenaltyLevel( iFatLevel );
-	}
+    {
+        int var1 = (int)this.foodStats.getSaturationLevel();
+        byte var2 = 4;
+
+        if (var1 < 26)
+        {
+            var2 = 0;
+        }
+        else if (var1 < 29)
+        {
+            var2 = 1;
+        }
+        else if (var1 < 32)
+        {
+            var2 = 2;
+        }
+        else if (var1 < 36)
+        {
+            var2 = 3;
+        }
+
+        this.SetFatPenaltyLevel(var2);
+    }
 	
 	@Override
 	protected void UpdateHungerPenaltyLevel()
-	{
-		int iHunger = foodStats.getFoodLevel();
-		int iPenaltyLevel = 5;
-		
-		if ( iHunger > 24 )
-		{
-			iPenaltyLevel = 0;
-		}
-		else if ( iHunger > 18 )
-		{
-			iPenaltyLevel = 1;
-		}
-		else if ( iHunger > 12 )
-		{
-			iPenaltyLevel = 2;
-		}
-		else if ( iHunger > 6 )
-		{
-			iPenaltyLevel = 3;
-		}
-		else if ( iHunger > 0 || foodStats.getSaturationLevel() > 0F )
-		{
-			iPenaltyLevel = 4;
-		}
-		
-		SetHungerPenaltyLevel( iPenaltyLevel );
-	}
+    {
+        int var1 = this.foodStats.getFoodLevel();
+        byte var2 = 5;
+
+        if (var1 > 36)
+        {
+            var2 = 0;
+        }
+        else if (var1 > 27)
+        {
+            var2 = 1;
+        }
+        else if (var1 > 18)
+        {
+            var2 = 2;
+        }
+        else if (var1 > 9)
+        {
+            var2 = 3;
+        }
+        else if (var1 > 0 || this.foodStats.getSaturationLevel() > 0.0F)
+        {
+            var2 = 4;
+        }
+
+        this.SetHungerPenaltyLevel(var2);
+    }
 	
 	@Override
 	protected void UpdateHealthPenaltyLevel()
-	{
-		int iHealth = getHealth();
-		int iPenaltyLevel = 5;
-		
-		if ( iHealth > 10 )
-		{
-			iPenaltyLevel = 0;
-		}
-		else if ( iHealth > 8 )
-		{
-			iPenaltyLevel = 1;
-		}
-		else if ( iHealth > 6 )
-		{
-			iPenaltyLevel = 2;
-		}
-		else if ( iHealth > 4 )
-		{
-			iPenaltyLevel = 3;
-		}
-		else if ( iHealth > 2 )
-		{
-			iPenaltyLevel = 4;
-		}
-		
-		SetHealthPenaltyLevel( iPenaltyLevel );
-	}
+    {
+        int var1 = this.getHealth();
+        byte var2 = 5;
+
+        if (var1 > 15)
+        {
+            var2 = 0;
+        }
+        else if (var1 > 12)
+        {
+            var2 = 1;
+        }
+        else if (var1 > 9)
+        {
+            var2 = 2;
+        }
+        else if (var1 > 6)
+        {
+            var2 = 3;
+        }
+        else if (var1 > 3)
+        {
+            var2 = 4;
+        }
+
+        this.SetHealthPenaltyLevel(var2);
+    }
 	
 	private boolean IsInGloom()
 	{
diff --git a/minecraft/net/minecraft/src/FoodStats.java b/minecraft/net/minecraft/src/FoodStats.java
index dcff638..6a9bda6 100644
--- a/minecraft/net/minecraft/src/FoodStats.java
+++ b/minecraft/net/minecraft/src/FoodStats.java
@@ -2,12 +2,13 @@ package net.minecraft.src;
 
 public class FoodStats
 {
+	private int YY_FOOD = 120;
 	/** The player's food level. */
 	// FCMOD: Code change to increase food meter resolution
 	/*
 	private int foodLevel = 20;
 	*/
-	private int foodLevel = 60;
+	private int foodLevel = YY_FOOD;
 	// END FCMOD
 
 	/** The player's food saturation. */
@@ -28,7 +29,7 @@ public class FoodStats
 	/*
 	private int prevFoodLevel = 20;
 	*/
-	private int prevFoodLevel = 60;
+	private int prevFoodLevel = YY_FOOD;
 	// END FCMOD
 
 	/**
@@ -134,14 +135,14 @@ public class FoodStats
 			
 			// sanity check the values as apparently they can get fucked up when importing from vanilla
 			
-			if ( foodLevel > 60 || foodLevel < 0 )
+			if (this.foodLevel > YY_FOOD || this.foodLevel < 0)
 			{
-				foodLevel = 60;
+				this.foodLevel = YY_FOOD;
 			}
 			
-			if ( foodSaturationLevel > 20F || foodSaturationLevel < 0F )
+			if (this.foodSaturationLevel > 40.0F || this.foodSaturationLevel < 0.0F)
 			{
-				foodSaturationLevel = 20F;
+				this.foodSaturationLevel = 40.0F;
 			}
 			// END FCMOD
 		}
@@ -184,7 +185,7 @@ public class FoodStats
 		/*
 		return this.foodLevel < 20;
 		*/
-		return this.foodLevel < 60;    	
+		return this.foodLevel < YY_FOOD;
 		// END FCMOD
 	}
 
@@ -222,7 +223,7 @@ public class FoodStats
 	{
 		int iPreviousFoodLevel = foodLevel;
 		
-		foodLevel = Math.min( iFoodGain + foodLevel, 60);
+		this.foodLevel = Math.min(iFoodGain + this.foodLevel, YY_FOOD);
 		
 		int iExcessFood = iFoodGain - ( foodLevel - iPreviousFoodLevel );
 		
@@ -230,7 +231,7 @@ public class FoodStats
 		{
 			// divide by 3 due to increased resolution
 			
-			foodSaturationLevel = Math.min( foodSaturationLevel + (float)iExcessFood * fFatMultiplier / 3F, 20F );
+			foodSaturationLevel = Math.min( foodSaturationLevel + (float)iExcessFood * fFatMultiplier / 3F, 40F );
 		}
 	}
 	
@@ -267,11 +268,11 @@ public class FoodStats
 			foodExhaustionLevel = 0F;
 		}
 
-		if ( foodLevel > 24 && player.shouldHeal() )
+		if ( player.GetHungerPenaltyLevel() == 0 && player.shouldHeal() )
 		{
 			++foodTimer;
 
-			if ( foodTimer >= 600 ) // once every 30 seconds
+			if ( foodTimer >= 6000 ) // once every 30 seconds
 			{
 				player.heal( 1 );
 				foodTimer = 0;
diff --git a/minecraft/net/minecraft/src/GuiIngame.java b/minecraft/net/minecraft/src/GuiIngame.java
index ec30ae0..b085b2f 100644
--- a/minecraft/net/minecraft/src/GuiIngame.java
+++ b/minecraft/net/minecraft/src/GuiIngame.java
@@ -45,610 +45,558 @@ public class GuiIngame extends Gui
 	 * Render the ingame overlay with quick icon bar, ...
 	 */
 	public void renderGameOverlay(float par1, boolean par2, int par3, int par4)
-	{
-		ScaledResolution var5 = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
-		int var6 = var5.getScaledWidth();
-		int var7 = var5.getScaledHeight();
-		FontRenderer var8 = this.mc.fontRenderer;
-		this.mc.entityRenderer.setupOverlayRendering();
-		GL11.glEnable(GL11.GL_BLEND);
-
-		if (Minecraft.isFancyGraphicsEnabled())
-		{
-			this.renderVignette(this.mc.thePlayer.getBrightness(par1), var6, var7);
-		}
-		else
-		{
-			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-		}
-
-		ItemStack var9 = this.mc.thePlayer.inventory.armorItemInSlot(3);
-
-		if (this.mc.gameSettings.thirdPersonView == 0 && var9 != null && var9.itemID == Block.pumpkin.blockID)
-		{
-			this.renderPumpkinBlur(var6, var7);
-		}
-
-		// FCMOD: Added (client only)
-		RenderModSpecificPlayerSightEffects();
-		// END FCMOD
-
-		if (!this.mc.thePlayer.isPotionActive(Potion.confusion))
-		{
-			float var10 = this.mc.thePlayer.prevTimeInPortal + (this.mc.thePlayer.timeInPortal - this.mc.thePlayer.prevTimeInPortal) * par1;
-
-			if (var10 > 0.0F)
-			{
-				this.renderPortalOverlay(var10, var6, var7);
-			}
-		}
-
-		boolean var11;
-		int var12;
-		int var13;
-		int var17;
-		int var16;
-		int var18;
-		int var20;
-		int var23;
-		int var22;
-		int var24;
-		byte var27;
-		int var26;
-		int var47;
-		int var50;
-
-		if (!this.mc.playerController.enableEverythingIsScrewedUpMode())
-		{
-			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-			this.mc.renderEngine.bindTexture("/gui/gui.png");
-			InventoryPlayer var31 = this.mc.thePlayer.inventory;
-			this.zLevel = -90.0F;
-			this.drawTexturedModalRect(var6 / 2 - 91, var7 - 22, 0, 0, 182, 22);
-			this.drawTexturedModalRect(var6 / 2 - 91 - 1 + var31.currentItem * 20, var7 - 22 - 1, 0, 22, 24, 22);
-			this.mc.renderEngine.bindTexture("/gui/icons.png");
-			GL11.glEnable(GL11.GL_BLEND);
-			GL11.glBlendFunc(GL11.GL_ONE_MINUS_DST_COLOR, GL11.GL_ONE_MINUS_SRC_COLOR);
-			this.drawTexturedModalRect(var6 / 2 - 7, var7 / 2 - 7, 0, 0, 16, 16);
-			GL11.glDisable(GL11.GL_BLEND);
-			var11 = this.mc.thePlayer.hurtResistantTime / 3 % 2 == 1;
-
-			if (this.mc.thePlayer.hurtResistantTime < 10)
-			{
-				var11 = false;
-			}
-
-			var12 = this.mc.thePlayer.getHealth();
-			var13 = this.mc.thePlayer.prevHealth;
-			this.rand.setSeed((long)(this.updateCounter * 312871));
-			boolean var14 = false;
-			FoodStats var15 = this.mc.thePlayer.getFoodStats();
-			var16 = var15.getFoodLevel();
-			var17 = var15.getPrevFoodLevel();
-			this.mc.mcProfiler.startSection("bossHealth");
-			this.renderBossHealth();
-			this.mc.mcProfiler.endSection();
-			int var19;
-
-			if (this.mc.playerController.shouldDrawHUD())
-			{
-				var18 = var6 / 2 - 91;
-				var19 = var6 / 2 + 91;
-				this.mc.mcProfiler.startSection("expBar");
-				var20 = this.mc.thePlayer.xpBarCap();
-
-				if (var20 > 0)
-				{
-					short var21 = 182;
-					var22 = (int)(this.mc.thePlayer.experience * (float)(var21 + 1));
-					var23 = var7 - 32 + 3;
-					this.drawTexturedModalRect(var18, var23, 0, 64, var21, 5);
-
-					if (var22 > 0)
-					{
-						this.drawTexturedModalRect(var18, var23, 0, 69, var22, 5);
-					}
-				}
-
-				var47 = var7 - 39;
-				var22 = var47 - 10;
-				var23 = this.mc.thePlayer.getTotalArmorValue();
-				var24 = -1;
-
-				if (this.mc.thePlayer.isPotionActive(Potion.regeneration))
-				{
-					var24 = this.updateCounter % 25;
-				}
-
-				this.mc.mcProfiler.endStartSection("healthArmor");
-				int var25;
-				int var29;
-				int var28;
-
-				for (var25 = 0; var25 < 10; ++var25)
-				{
-					if (var23 > 0)
-					{
-						var26 = var18 + var25 * 8;
-
-						if (var25 * 2 + 1 < var23)
-						{
-							this.drawTexturedModalRect(var26, var22, 34, 9, 9, 9);
-						}
-
-						if (var25 * 2 + 1 == var23)
-						{
-							this.drawTexturedModalRect(var26, var22, 25, 9, 9, 9);
-						}
-
-						if (var25 * 2 + 1 > var23)
-						{
-							this.drawTexturedModalRect(var26, var22, 16, 9, 9, 9);
-						}
-					}
-
-					var26 = 16;
-
-					if (this.mc.thePlayer.isPotionActive(Potion.poison))
-					{
-						var26 += 36;
-					}
-					else if (this.mc.thePlayer.isPotionActive(Potion.wither))
-					{
-						var26 += 72;
-					}
-
-					var27 = 0;
-
-					if (var11)
-					{
-						var27 = 1;
-					}
-
-					var28 = var18 + var25 * 8;
-					var29 = var47;
-
-					if (var12 <= 4)
-					{
-						var29 = var47 + this.rand.nextInt(2);
-					}
-
-					if (var25 == var24)
-					{
-						var29 -= 2;
-					}
-
-					byte var30 = 0;
-
-					if (this.mc.theWorld.getWorldInfo().isHardcoreModeEnabled())
-					{
-						var30 = 5;
-					}
-
-					this.drawTexturedModalRect(var28, var29, 16 + var27 * 9, 9 * var30, 9, 9);
-
-					if (var11)
-					{
-						if (var25 * 2 + 1 < var13)
-						{
-							this.drawTexturedModalRect(var28, var29, var26 + 54, 9 * var30, 9, 9);
-						}
-
-						if (var25 * 2 + 1 == var13)
-						{
-							this.drawTexturedModalRect(var28, var29, var26 + 63, 9 * var30, 9, 9);
-						}
-					}
-
-					if (var25 * 2 + 1 < var12)
-					{
-						this.drawTexturedModalRect(var28, var29, var26 + 36, 9 * var30, 9, 9);
-					}
-
-					if (var25 * 2 + 1 == var12)
-					{
-						this.drawTexturedModalRect(var28, var29, var26 + 45, 9 * var30, 9, 9);
-					}
-				}
-
-				this.mc.mcProfiler.endStartSection("food");
-
-				// FCMOD: Changed to add more detail to hunger display (client only)
-				/*
-				for (var25 = 0; var25 < 10; ++var25)
-				{
-					var26 = var47;
-					var50 = 16;
-					byte var51 = 0;
-
-					if (this.mc.thePlayer.isPotionActive(Potion.hunger))
-					{
-						var50 += 36;
-						var51 = 13;
-					}
-
-					if (this.mc.thePlayer.getFoodStats().getSaturationLevel() <= 0.0F && this.updateCounter % (var16 * 3 + 1) == 0)
-					{
-						var26 = var47 + (this.rand.nextInt(3) - 1);
-					}
-
-					if (var14)
-					{
-						var51 = 1;
-					}
-
-					var29 = var19 - var25 * 8 - 9;
-					this.drawTexturedModalRect(var29, var26, 16 + var51 * 9, 27, 9, 9);
-
-					if (var14)
-					{
-						if (var25 * 2 + 1 < var17)
-						{
-							this.drawTexturedModalRect(var29, var26, var50 + 54, 27, 9, 9);
-						}
-
-						if (var25 * 2 + 1 == var17)
-						{
-							this.drawTexturedModalRect(var29, var26, var50 + 63, 27, 9, 9);
-						}
-					}
-
-					if (var25 * 2 + 1 < var16)
-					{
-						this.drawTexturedModalRect(var29, var26, var50 + 36, 27, 9, 9);
-					}
-
-					if (var25 * 2 + 1 == var16)
-					{
-						this.drawTexturedModalRect(var29, var26, var50 + 45, 27, 9, 9);
-					}
-				}
-				*/
-				DrawFoodOverlay( var19, var47 );
-				
-				int iSightlessTextOffset = -8;
-				// END FCMOD
-
-				this.mc.mcProfiler.endStartSection("air");
-
-				// FCMOD: Change to display air gauge during recovery (client only)
-				/*
-				if (this.mc.thePlayer.isInsideOfMaterial(Material.water))
-				*/
-				if (this.mc.thePlayer.isInsideOfMaterial(Material.water) || mc.thePlayer.getAir() < 300 )
-				// END FCMOD 
-				{
-					var25 = this.mc.thePlayer.getAir();
-					var26 = MathHelper.ceiling_double_int((double)(var25 - 2) * 10.0D / 300.0D);
-					var50 = MathHelper.ceiling_double_int((double)var25 * 10.0D / 300.0D) - var26;
-
-					for (var28 = 0; var28 < var26 + var50; ++var28)
-					{
-						if (var28 < var26)
-						{
-							this.drawTexturedModalRect(var19 - var28 * 8 - 9, var22, 16, 18, 9, 9);
-						}
-						else
-						{
-							this.drawTexturedModalRect(var19 - var28 * 8 - 9, var22, 25, 18, 9, 9);
-						}
-					}
-				}
-				// FCMOD: Added (client only)
-				else if ( !DrawPenaltyText( var19, var22 ) )
-				{                	
-					iSightlessTextOffset = 0;
-				}
-				
-				DrawSightlessText( var19, var22 + iSightlessTextOffset );
-				// END FCMOD
-
-				this.mc.mcProfiler.endSection();
-			}
-
-			GL11.glDisable(GL11.GL_BLEND);
-			this.mc.mcProfiler.startSection("actionBar");
-			GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-			RenderHelper.enableGUIStandardItemLighting();
-
-			for (var18 = 0; var18 < 9; ++var18)
-			{
-				var19 = var6 / 2 - 90 + var18 * 20 + 2;
-				var20 = var7 - 16 - 3;
-				this.renderInventorySlot(var18, var19, var20, par1);
-			}
-
-			RenderHelper.disableStandardItemLighting();
-			GL11.glDisable(GL12.GL_RESCALE_NORMAL);
-			this.mc.mcProfiler.endSection();
-		}
-
-		float var33;
-
-		if (this.mc.thePlayer.getSleepTimer() > 0)
-		{
-			this.mc.mcProfiler.startSection("sleep");
-			GL11.glDisable(GL11.GL_DEPTH_TEST);
-			GL11.glDisable(GL11.GL_ALPHA_TEST);
-			int var32 = this.mc.thePlayer.getSleepTimer();
-			var33 = (float)var32 / 100.0F;
-
-			if (var33 > 1.0F)
-			{
-				var33 = 1.0F - (float)(var32 - 100) / 10.0F;
-			}
-
-			var12 = (int)(220.0F * var33) << 24 | 1052704;
-			drawRect(0, 0, var6, var7, var12);
-			GL11.glEnable(GL11.GL_ALPHA_TEST);
-			GL11.glEnable(GL11.GL_DEPTH_TEST);
-			this.mc.mcProfiler.endSection();
-		}
-
-		int var38;
-		int var37;
-
-		if (this.mc.playerController.func_78763_f() && this.mc.thePlayer.experienceLevel > 0)
-		{
-			this.mc.mcProfiler.startSection("expLevel");
-			var11 = false;
-			var12 = var11 ? 16777215 : 8453920;
-			String var34 = "" + this.mc.thePlayer.experienceLevel;
-			var38 = (var6 - var8.getStringWidth(var34)) / 2;
-			var37 = var7 - 31 - 4;
-			var8.drawString(var34, var38 + 1, var37, 0);
-			var8.drawString(var34, var38 - 1, var37, 0);
-			var8.drawString(var34, var38, var37 + 1, 0);
-			var8.drawString(var34, var38, var37 - 1, 0);
-			var8.drawString(var34, var38, var37, var12);
-			this.mc.mcProfiler.endSection();
-		}
-
-		String var35;
-
-		if (this.mc.gameSettings.heldItemTooltips)
-		{
-			this.mc.mcProfiler.startSection("toolHighlight");
-
-			if (this.remainingHighlightTicks > 0 && this.highlightingItemStack != null)
-			{
-				var35 = this.highlightingItemStack.getDisplayName();
-				var12 = (var6 - var8.getStringWidth(var35)) / 2;
-				var13 = var7 - 59;
-
-				if (!this.mc.playerController.shouldDrawHUD())
-				{
-					var13 += 14;
-				}
-
-				var38 = (int)((float)this.remainingHighlightTicks * 256.0F / 10.0F);
-
-				if (var38 > 255)
-				{
-					var38 = 255;
-				}
-
-				if (var38 > 0)
-				{
-					GL11.glPushMatrix();
-					GL11.glEnable(GL11.GL_BLEND);
-					GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-					var8.drawStringWithShadow(var35, var12, var13, 16777215 + (var38 << 24));
-					GL11.glDisable(GL11.GL_BLEND);
-					GL11.glPopMatrix();
-				}
-			}
-
-			this.mc.mcProfiler.endSection();
-		}
-
-		if (this.mc.isDemo())
-		{
-			this.mc.mcProfiler.startSection("demo");
-			var35 = "";
-
-			if (this.mc.theWorld.getTotalWorldTime() >= 120500L)
-			{
-				var35 = StatCollector.translateToLocal("demo.demoExpired");
-			}
-			else
-			{
-				var35 = String.format(StatCollector.translateToLocal("demo.remainingTime"), new Object[] {StringUtils.ticksToElapsedTime((int)(120500L - this.mc.theWorld.getTotalWorldTime()))});
-			}
-
-			var12 = var8.getStringWidth(var35);
-			var8.drawStringWithShadow(var35, var6 - var12 - 10, 5, 16777215);
-			this.mc.mcProfiler.endSection();
-		}
-
-		if (this.mc.gameSettings.showDebugInfo)
-		{
-			this.mc.mcProfiler.startSection("debug");
-			GL11.glPushMatrix();
-			var8.drawStringWithShadow("Minecraft 1.5.2 (" + this.mc.debug + ")", 2, 2, 16777215);
-			var8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 12, 16777215);
-			var8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 22, 16777215);
-			var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 32, 16777215);
-			var8.drawStringWithShadow(this.mc.getWorldProviderName(), 2, 42, 16777215);
-			long var36 = Runtime.getRuntime().maxMemory();
-			long var40 = Runtime.getRuntime().totalMemory();
-			long var43 = Runtime.getRuntime().freeMemory();
-			long var44 = var40 - var43;
-			String var46 = "Used memory: " + var44 * 100L / var36 + "% (" + var44 / 1024L / 1024L + "MB) of " + var36 / 1024L / 1024L + "MB";
-			this.drawString(var8, var46, var6 - var8.getStringWidth(var46) - 2, 2, 14737632);
-			var46 = "Allocated memory: " + var40 * 100L / var36 + "% (" + var40 / 1024L / 1024L + "MB)";
-			this.drawString(var8, var46, var6 - var8.getStringWidth(var46) - 2, 12, 14737632);
-			// FCMOD: Removed (client only)
-			/*
-			var47 = MathHelper.floor_double(this.mc.thePlayer.posX);
-			var22 = MathHelper.floor_double(this.mc.thePlayer.posY);
-			var23 = MathHelper.floor_double(this.mc.thePlayer.posZ);
-			this.drawString(var8, String.format("x: %.5f (%d) // c: %d (%d)", new Object[] {Double.valueOf(this.mc.thePlayer.posX), Integer.valueOf(var47), Integer.valueOf(var47 >> 4), Integer.valueOf(var47 & 15)}), 2, 64, 14737632);
-			this.drawString(var8, String.format("y: %.3f (feet pos, %.3f eyes pos)", new Object[] {Double.valueOf(this.mc.thePlayer.boundingBox.minY), Double.valueOf(this.mc.thePlayer.posY)}), 2, 72, 14737632);
-			this.drawString(var8, String.format("z: %.5f (%d) // c: %d (%d)", new Object[] {Double.valueOf(this.mc.thePlayer.posZ), Integer.valueOf(var23), Integer.valueOf(var23 >> 4), Integer.valueOf(var23 & 15)}), 2, 80, 14737632);
-			var24 = MathHelper.floor_double((double)(this.mc.thePlayer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
-			this.drawString(var8, "f: " + var24 + " (" + Direction.directions[var24] + ") / " + MathHelper.wrapAngleTo180_float(this.mc.thePlayer.rotationYaw), 2, 88, 14737632);
-
-			if (this.mc.theWorld != null && this.mc.theWorld.blockExists(var47, var22, var23))
-			{
-				Chunk var52 = this.mc.theWorld.getChunkFromBlockCoords(var47, var23);
-				this.drawString(var8, "lc: " + (var52.getTopFilledSegment() + 15) + " b: " + var52.getBiomeGenForWorldCoords(var47 & 15, var23 & 15, this.mc.theWorld.getWorldChunkManager()).biomeName + " bl: " + var52.getSavedLightValue(EnumSkyBlock.Block, var47 & 15, var22, var23 & 15) + " sl: " + var52.getSavedLightValue(EnumSkyBlock.Sky, var47 & 15, var22, var23 & 15) + " rl: " + var52.getBlockLightValue(var47 & 15, var22, var23 & 15, 0), 2, 96, 14737632);
-			}
-
-			this.drawString(var8, String.format("ws: %.3f, fs: %.3f, g: %b, fl: %d", new Object[] {Float.valueOf(this.mc.thePlayer.capabilities.getWalkSpeed()), Float.valueOf(this.mc.thePlayer.capabilities.getFlySpeed()), Boolean.valueOf(this.mc.thePlayer.onGround), Integer.valueOf(this.mc.theWorld.getHeightValue(var47, var23))}), 2, 104, 14737632);
-			*/
-			// END FCMOD
-			// FCMOD: Added (client only)
-			RenderModDebugOverlay();
-			// END FCMOD
-			GL11.glPopMatrix();
-			this.mc.mcProfiler.endSection();
-		}
-
-		if (this.recordPlayingUpFor > 0)
-		{
-			this.mc.mcProfiler.startSection("overlayMessage");
-			var33 = (float)this.recordPlayingUpFor - par1;
-			var12 = (int)(var33 * 256.0F / 20.0F);
-
-			if (var12 > 255)
-			{
-				var12 = 255;
-			}
-
-			if (var12 > 0)
-			{
-				GL11.glPushMatrix();
-				GL11.glTranslatef((float)(var6 / 2), (float)(var7 - 48), 0.0F);
-				GL11.glEnable(GL11.GL_BLEND);
-				GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-				var13 = 16777215;
-
-				if (this.recordIsPlaying)
-				{
-					var13 = Color.HSBtoRGB(var33 / 50.0F, 0.7F, 0.6F) & 16777215;
-				}
-
-				var8.drawString(this.recordPlaying, -var8.getStringWidth(this.recordPlaying) / 2, -4, var13 + (var12 << 24));
-				GL11.glDisable(GL11.GL_BLEND);
-				GL11.glPopMatrix();
-			}
-
-			this.mc.mcProfiler.endSection();
-		}
-
-		ScoreObjective var42 = this.mc.theWorld.getScoreboard().func_96539_a(1);
-
-		if (var42 != null)
-		{
-			this.func_96136_a(var42, var7, var6, var8);
-		}
-
-		GL11.glEnable(GL11.GL_BLEND);
-		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-		GL11.glDisable(GL11.GL_ALPHA_TEST);
-		GL11.glPushMatrix();
-		GL11.glTranslatef(0.0F, (float)(var7 - 48), 0.0F);
-		this.mc.mcProfiler.startSection("chat");
-		this.persistantChatGUI.drawChat(this.updateCounter);
-		this.mc.mcProfiler.endSection();
-		GL11.glPopMatrix();
-		var42 = this.mc.theWorld.getScoreboard().func_96539_a(0);
-
-		if (this.mc.gameSettings.keyBindPlayerList.pressed && (!this.mc.isIntegratedServerRunning() || this.mc.thePlayer.sendQueue.playerInfoList.size() > 1 || var42 != null))
-		{
-			this.mc.mcProfiler.startSection("playerList");
-			NetClientHandler var39 = this.mc.thePlayer.sendQueue;
-			List var41 = var39.playerInfoList;
-			var38 = var39.currentServerMaxPlayers;
-			var37 = var38;
-
-			for (var16 = 1; var37 > 20; var37 = (var38 + var16 - 1) / var16)
-			{
-				++var16;
-			}
-
-			var17 = 300 / var16;
-
-			if (var17 > 150)
-			{
-				var17 = 150;
-			}
-
-			var18 = (var6 - var16 * var17) / 2;
-			byte var45 = 10;
-			drawRect(var18 - 1, var45 - 1, var18 + var17 * var16, var45 + 9 * var37, Integer.MIN_VALUE);
-
-			for (var20 = 0; var20 < var38; ++var20)
-			{
-				var47 = var18 + var20 % var16 * var17;
-				var22 = var45 + var20 / var16 * 9;
-				drawRect(var47, var22, var47 + var17 - 1, var22 + 8, 553648127);
-				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-				GL11.glEnable(GL11.GL_ALPHA_TEST);
-
-				if (var20 < var41.size())
-				{
-					GuiPlayerInfo var49 = (GuiPlayerInfo)var41.get(var20);
-					ScorePlayerTeam var48 = this.mc.theWorld.getScoreboard().getPlayersTeam(var49.name);
-					String var53 = ScorePlayerTeam.func_96667_a(var48, var49.name);
-					var8.drawStringWithShadow(var53, var47, var22, 16777215);
-
-					if (var42 != null)
-					{
-						var26 = var47 + var8.getStringWidth(var53) + 5;
-						var50 = var47 + var17 - 12 - 5;
-
-						if (var50 - var26 > 5)
-						{
-							Score var56 = var42.getScoreboard().func_96529_a(var49.name, var42);
-							String var57 = EnumChatFormatting.YELLOW + "" + var56.func_96652_c();
-							var8.drawStringWithShadow(var57, var50 - var8.getStringWidth(var57), var22, 16777215);
-						}
-					}
-
-					GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-					this.mc.renderEngine.bindTexture("/gui/icons.png");
-					byte var55 = 0;
-					boolean var54 = false;
-
-					if (var49.responseTime < 0)
-					{
-						var27 = 5;
-					}
-					else if (var49.responseTime < 150)
-					{
-						var27 = 0;
-					}
-					else if (var49.responseTime < 300)
-					{
-						var27 = 1;
-					}
-					else if (var49.responseTime < 600)
-					{
-						var27 = 2;
-					}
-					else if (var49.responseTime < 1000)
-					{
-						var27 = 3;
-					}
-					else
-					{
-						var27 = 4;
-					}
-
-					this.zLevel += 100.0F;
-					this.drawTexturedModalRect(var47 + var17 - 12, var22, 0 + var55 * 10, 176 + var27 * 8, 10, 8);
-					this.zLevel -= 100.0F;
-				}
-			}
-		}
-
-		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		GL11.glDisable(GL11.GL_LIGHTING);
-		GL11.glEnable(GL11.GL_ALPHA_TEST);
-	}
-
+    {
+        ScaledResolution var5 = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
+        int var6 = var5.getScaledWidth();
+        int var7 = var5.getScaledHeight();
+        FontRenderer var8 = this.mc.fontRenderer;
+        this.mc.entityRenderer.setupOverlayRendering();
+        GL11.glEnable(GL11.GL_BLEND);
+
+        if (Minecraft.isFancyGraphicsEnabled())
+        {
+            this.renderVignette(this.mc.thePlayer.getBrightness(par1), var6, var7);
+        }
+        else
+        {
+            GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+        }
+
+        ItemStack var9 = this.mc.thePlayer.inventory.armorItemInSlot(3);
+
+        if (this.mc.gameSettings.thirdPersonView == 0 && var9 != null && var9.itemID == Block.pumpkin.blockID)
+        {
+            this.renderPumpkinBlur(var6, var7);
+        }
+
+        this.RenderModSpecificPlayerSightEffects();
+
+        if (!this.mc.thePlayer.isPotionActive(Potion.confusion))
+        {
+            float var10 = this.mc.thePlayer.prevTimeInPortal + (this.mc.thePlayer.timeInPortal - this.mc.thePlayer.prevTimeInPortal) * par1;
+
+            if (var10 > 0.0F)
+            {
+                this.renderPortalOverlay(var10, var6, var7);
+            }
+        }
+
+        int health;
+        int var12;
+        int var13;
+        int var14;
+        int var15;
+        int var16;
+        int var18;
+        byte var20;
+        int var21;
+        int var22;
+        int var23;
+        byte var31;
+        boolean var37;
+
+        if (!this.mc.playerController.enableEverythingIsScrewedUpMode())
+        {
+            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+            this.mc.renderEngine.bindTexture("/gui/gui.png");
+            InventoryPlayer var24 = this.mc.thePlayer.inventory;
+            this.zLevel = -90.0F;
+            this.drawTexturedModalRect(var6 / 2 - 91, var7 - 22, 0, 0, 182, 22);
+            this.drawTexturedModalRect(var6 / 2 - 91 - 1 + var24.currentItem * 20, var7 - 22 - 1, 0, 22, 24, 22);
+            this.mc.renderEngine.bindTexture("/gui/icons.png");
+            GL11.glEnable(GL11.GL_BLEND);
+            GL11.glBlendFunc(GL11.GL_ONE_MINUS_DST_COLOR, GL11.GL_ONE_MINUS_SRC_COLOR);
+            this.drawTexturedModalRect(var6 / 2 - 7, var7 / 2 - 7, 0, 0, 16, 16);
+            GL11.glDisable(GL11.GL_BLEND);
+            var37 = this.mc.thePlayer.hurtResistantTime / 3 % 2 == 1;
+
+            if (this.mc.thePlayer.hurtResistantTime < 10)
+            {
+                var37 = false;
+            }
+
+            health = this.mc.thePlayer.getHealth();
+            var12 = this.mc.thePlayer.prevHealth;
+            this.rand.setSeed((long)(this.updateCounter * 312871));
+            boolean var25 = false;
+            FoodStats var26 = this.mc.thePlayer.getFoodStats();
+            var14 = var26.getFoodLevel();
+            var13 = var26.getPrevFoodLevel();
+            this.mc.mcProfiler.startSection("bossHealth");
+            this.renderBossHealth();
+            this.mc.mcProfiler.endSection();
+            int var27;
+
+            if (this.mc.playerController.shouldDrawHUD())
+            {
+                var15 = var6 / 2 - 91;
+                var27 = var6 / 2 + 91;
+                this.mc.mcProfiler.startSection("expBar");
+                var16 = this.mc.thePlayer.xpBarCap();
+                int var17;
+
+                if (var16 > 0)
+                {
+                    short var28 = 182;
+                    var18 = (int)(this.mc.thePlayer.experience * (float)(var28 + 1));
+                    var17 = var7 - 32 + 3;
+                    this.drawTexturedModalRect(var15, var17, 0, 64, var28, 5);
+
+                    if (var18 > 0)
+                    {
+                        this.drawTexturedModalRect(var15, var17, 0, 69, var18, 5);
+                    }
+                }
+
+                var22 = var7 - 39;
+                var18 = var22 - 20;
+                var17 = this.mc.thePlayer.getTotalArmorValue();
+                int var19 = -1;
+
+                if (this.mc.thePlayer.isPotionActive(Potion.regeneration))
+                {
+                    var19 = this.updateCounter % 25;
+                }
+
+                this.mc.mcProfiler.endStartSection("healthArmor");
+                int var30;
+                int i_10;
+
+                for (i_10 = 0; i_10 < 10; ++i_10)
+                {
+                    if (var17 > 0)
+                    {
+                        var21 = var15 + i_10 * 8;
+
+                        if (i_10 * 2 + 1 < var17)
+                        {
+                            this.drawTexturedModalRect(var21, var18, 34, 9, 9, 9);
+                        }
+
+                        if (i_10 * 2 + 1 == var17)
+                        {
+                            this.drawTexturedModalRect(var21, var18, 25, 9, 9, 9);
+                        }
+
+                        if (i_10 * 2 + 1 > var17)
+                        {
+                            this.drawTexturedModalRect(var21, var18, 16, 9, 9, 9);
+                        }
+                    }
+
+                    var21 = 16;
+
+                    if (this.mc.thePlayer.isPotionActive(Potion.poison))
+                    {
+                        var21 += 36;
+                    }
+                    else if (this.mc.thePlayer.isPotionActive(Potion.wither))
+                    {
+                        var21 += 72;
+                    }
+
+                    var20 = 0;
+
+                    if (var37)
+                    {
+                        var20 = 1;
+                    }
+
+                    var30 = var15 + i_10 * 8;
+                    int var29 = var22;
+
+                    if (health <= 4)
+                    {
+                        var29 = var22 + this.rand.nextInt(2);
+                    }
+
+                    if (i_10 == var19)
+                    {
+                        var29 -= 2;
+                    }
+
+                    var31 = 0;
+
+                    if (this.mc.theWorld.getWorldInfo().isHardcoreModeEnabled())
+                    {
+                        var31 = 5;
+                    }
+                    
+                    int var29_2 = var22-10;
+                    if (health <= 4)
+                    {
+                        var29_2 += this.rand.nextInt(2);
+                    }
+                    if (i_10 + 10 == var19)
+                    {
+                    	var29_2 -= 2;
+                    }
+                    
+
+                    this.drawTexturedModalRect(var30, var29, 16 + var20 * 9, 9 * var31, 9, 9);
+                    this.drawTexturedModalRect(var30, var29_2, 16 + var20 * 9, 9 * var31, 9, 9);
+
+                    if (var37)
+                    {
+                        if (i_10 * 2 + 1 < var12)
+                        {
+                            this.drawTexturedModalRect(var30, var29, var21 + 54, 9 * var31, 9, 9);
+                        }
+
+                        if (i_10 * 2 + 1 == var12)
+                        {
+                            this.drawTexturedModalRect(var30, var29, var21 + 63, 9 * var31, 9, 9);
+                        }
+                        /*
+                        if (i_10 * 2 + 1 < var12-20)
+                        {
+                            this.drawTexturedModalRect(var30, var29-10, var21 + 54, 9 * var31, 9, 9);
+                        }
+
+                        if (i_10 * 2 + 1 == var12-20)
+                        {
+                            this.drawTexturedModalRect(var30, var29-10, var21 + 63, 9 * var31, 9, 9);
+                        }*/
+                    }
+
+                    if (i_10 * 2 + 1 < health)
+                    {
+                        this.drawTexturedModalRect(var30, var29, var21 + 36, 9 * var31, 9, 9);
+                    }
+
+                    if (i_10 * 2 + 1 == health)
+                    {
+                        this.drawTexturedModalRect(var30, var29, var21 + 45, 9 * var31, 9, 9);
+                    }
+                    
+                    if (i_10 * 2 + 1 < health-20)
+                    {
+                        this.drawTexturedModalRect(var30, var29_2, var21 + 36, 9 * var31, 9, 9);
+                    }
+
+                    if (i_10 * 2 + 1 == health-20)
+                    {
+                        this.drawTexturedModalRect(var30, var29_2, var21 + 45, 9 * var31, 9, 9);
+                    }
+                }
+
+                this.mc.mcProfiler.endStartSection("food");
+                this.DrawFoodOverlay(var27, var22);
+                byte var48 = -8;
+                this.mc.mcProfiler.endStartSection("air");
+
+                if (!this.mc.thePlayer.isInsideOfMaterial(Material.water) && this.mc.thePlayer.getAir() >= 300)
+                {
+                    if (!this.DrawPenaltyText(var27, var18))
+                    {
+                        var48 = 0;
+                    }
+                }
+                else
+                {
+                    i_10 = this.mc.thePlayer.getAir();
+                    var21 = MathHelper.ceiling_double_int((double)(i_10 - 2) * 10.0D / 300.0D);
+                    var23 = MathHelper.ceiling_double_int((double)i_10 * 10.0D / 300.0D) - var21;
+
+                    for (var30 = 0; var30 < var21 + var23; ++var30)
+                    {
+                        if (var30 < var21)
+                        {
+                            this.drawTexturedModalRect(var27 - var30 * 8 - 9, var18, 16, 18, 9, 9);
+                        }
+                        else
+                        {
+                            this.drawTexturedModalRect(var27 - var30 * 8 - 9, var18, 25, 18, 9, 9);
+                        }
+                    }
+                }
+
+                this.DrawSightlessText(var27, var18 + var48);
+                this.mc.mcProfiler.endSection();
+            }
+
+            GL11.glDisable(GL11.GL_BLEND);
+            this.mc.mcProfiler.startSection("actionBar");
+            GL11.glEnable(GL12.GL_RESCALE_NORMAL);
+            RenderHelper.enableGUIStandardItemLighting();
+
+            for (var15 = 0; var15 < 9; ++var15)
+            {
+                var27 = var6 / 2 - 90 + var15 * 20 + 2;
+                var16 = var7 - 16 - 3;
+                this.renderInventorySlot(var15, var27, var16, par1);
+            }
+
+            RenderHelper.disableStandardItemLighting();
+            GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+            this.mc.mcProfiler.endSection();
+        }
+
+        float var38;
+        int var39;
+
+        if (this.mc.thePlayer.getSleepTimer() > 0)
+        {
+            this.mc.mcProfiler.startSection("sleep");
+            GL11.glDisable(GL11.GL_DEPTH_TEST);
+            GL11.glDisable(GL11.GL_ALPHA_TEST);
+            var39 = this.mc.thePlayer.getSleepTimer();
+            var38 = (float)var39 / 100.0F;
+
+            if (var38 > 1.0F)
+            {
+                var38 = 1.0F - (float)(var39 - 100) / 10.0F;
+            }
+
+            health = (int)(220.0F * var38) << 24 | 1052704;
+            drawRect(0, 0, var6, var7, health);
+            GL11.glEnable(GL11.GL_ALPHA_TEST);
+            GL11.glEnable(GL11.GL_DEPTH_TEST);
+            this.mc.mcProfiler.endSection();
+        }
+
+        int var40;
+        String var41;
+
+        if (this.mc.playerController.func_78763_f() && this.mc.thePlayer.experienceLevel > 0)
+        {
+            this.mc.mcProfiler.startSection("expLevel");
+            var37 = false;
+            health = var37 ? 16777215 : 8453920;
+            var41 = "" + this.mc.thePlayer.experienceLevel;
+            var39 = (var6 - var8.getStringWidth(var41)) / 2;
+            var40 = var7 - 31 - 4;
+            var8.drawString(var41, var39 + 1, var40, 0);
+            var8.drawString(var41, var39 - 1, var40, 0);
+            var8.drawString(var41, var39, var40 + 1, 0);
+            var8.drawString(var41, var39, var40 - 1, 0);
+            var8.drawString(var41, var39, var40, health);
+            this.mc.mcProfiler.endSection();
+        }
+
+        if (this.mc.gameSettings.heldItemTooltips)
+        {
+            this.mc.mcProfiler.startSection("toolHighlight");
+
+            if (this.remainingHighlightTicks > 0 && this.highlightingItemStack != null)
+            {
+                var41 = this.highlightingItemStack.getDisplayName();
+                health = (var6 - var8.getStringWidth(var41)) / 2;
+                var12 = var7 - 59;
+
+                if (!this.mc.playerController.shouldDrawHUD())
+                {
+                    var12 += 14;
+                }
+
+                var39 = (int)((float)this.remainingHighlightTicks * 256.0F / 10.0F);
+
+                if (var39 > 255)
+                {
+                    var39 = 255;
+                }
+
+                if (var39 > 0)
+                {
+                    GL11.glPushMatrix();
+                    GL11.glEnable(GL11.GL_BLEND);
+                    GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+                    var8.drawStringWithShadow(var41, health, var12, 16777215 + (var39 << 24));
+                    GL11.glDisable(GL11.GL_BLEND);
+                    GL11.glPopMatrix();
+                }
+            }
+
+            this.mc.mcProfiler.endSection();
+        }
+
+        if (this.mc.isDemo())
+        {
+            this.mc.mcProfiler.startSection("demo");
+            var41 = "";
+
+            if (this.mc.theWorld.getTotalWorldTime() >= 120500L)
+            {
+                var41 = StatCollector.translateToLocal("demo.demoExpired");
+            }
+            else
+            {
+                var41 = String.format(StatCollector.translateToLocal("demo.remainingTime"), new Object[] {StringUtils.ticksToElapsedTime((int)(120500L - this.mc.theWorld.getTotalWorldTime()))});
+            }
+
+            health = var8.getStringWidth(var41);
+            var8.drawStringWithShadow(var41, var6 - health - 10, 5, 16777215);
+            this.mc.mcProfiler.endSection();
+        }
+
+        String var36;
+
+        if (this.mc.gameSettings.showDebugInfo)
+        {
+            this.mc.mcProfiler.startSection("debug");
+            GL11.glPushMatrix();
+            var8.drawStringWithShadow("Minecraft 1.5.2 (" + this.mc.debug + ")", 2, 2, 16777215);
+            var8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 12, 16777215);
+            var8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 22, 16777215);
+            var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 32, 16777215);
+            var8.drawStringWithShadow(this.mc.getWorldProviderName(), 2, 42, 16777215);
+            long var43 = Runtime.getRuntime().maxMemory();
+            long var46 = Runtime.getRuntime().totalMemory();
+            long var32 = Runtime.getRuntime().freeMemory();
+            long var34 = var46 - var32;
+            var36 = "Used memory: " + var34 * 100L / var43 + "% (" + var34 / 1024L / 1024L + "MB) of " + var43 / 1024L / 1024L + "MB";
+            this.drawString(var8, var36, var6 - var8.getStringWidth(var36) - 2, 2, 14737632);
+            var36 = "Allocated memory: " + var46 * 100L / var43 + "% (" + var46 / 1024L / 1024L + "MB)";
+            this.drawString(var8, var36, var6 - var8.getStringWidth(var36) - 2, 12, 14737632);
+            this.RenderModDebugOverlay();
+            GL11.glPopMatrix();
+            this.mc.mcProfiler.endSection();
+        }
+
+        if (this.recordPlayingUpFor > 0)
+        {
+            this.mc.mcProfiler.startSection("overlayMessage");
+            var38 = (float)this.recordPlayingUpFor - par1;
+            health = (int)(var38 * 256.0F / 20.0F);
+
+            if (health > 255)
+            {
+                health = 255;
+            }
+
+            if (health > 0)
+            {
+                GL11.glPushMatrix();
+                GL11.glTranslatef((float)(var6 / 2), (float)(var7 - 48), 0.0F);
+                GL11.glEnable(GL11.GL_BLEND);
+                GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+                var12 = 16777215;
+
+                if (this.recordIsPlaying)
+                {
+                    var12 = Color.HSBtoRGB(var38 / 50.0F, 0.7F, 0.6F) & 16777215;
+                }
+
+                var8.drawString(this.recordPlaying, -var8.getStringWidth(this.recordPlaying) / 2, -4, var12 + (health << 24));
+                GL11.glDisable(GL11.GL_BLEND);
+                GL11.glPopMatrix();
+            }
+
+            this.mc.mcProfiler.endSection();
+        }
+
+        ScoreObjective var44 = this.mc.theWorld.getScoreboard().func_96539_a(1);
+
+        if (var44 != null)
+        {
+            this.func_96136_a(var44, var7, var6, var8);
+        }
+
+        GL11.glEnable(GL11.GL_BLEND);
+        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+        GL11.glDisable(GL11.GL_ALPHA_TEST);
+        GL11.glPushMatrix();
+        GL11.glTranslatef(0.0F, (float)(var7 - 48), 0.0F);
+        this.mc.mcProfiler.startSection("chat");
+        this.persistantChatGUI.drawChat(this.updateCounter);
+        this.mc.mcProfiler.endSection();
+        GL11.glPopMatrix();
+        var44 = this.mc.theWorld.getScoreboard().func_96539_a(0);
+
+        if (this.mc.gameSettings.keyBindPlayerList.pressed && (!this.mc.isIntegratedServerRunning() || this.mc.thePlayer.sendQueue.playerInfoList.size() > 1 || var44 != null))
+        {
+            this.mc.mcProfiler.startSection("playerList");
+            NetClientHandler var45 = this.mc.thePlayer.sendQueue;
+            List var47 = var45.playerInfoList;
+            var39 = var45.currentServerMaxPlayers;
+            var40 = var39;
+
+            for (var14 = 1; var40 > 20; var40 = (var39 + var14 - 1) / var14)
+            {
+                ++var14;
+            }
+
+            var13 = 300 / var14;
+
+            if (var13 > 150)
+            {
+                var13 = 150;
+            }
+
+            var15 = (var6 - var14 * var13) / 2;
+            var31 = 10;
+            drawRect(var15 - 1, var31 - 1, var15 + var13 * var14, var31 + 9 * var40, Integer.MIN_VALUE);
+
+            for (var16 = 0; var16 < var39; ++var16)
+            {
+                var22 = var15 + var16 % var14 * var13;
+                var18 = var31 + var16 / var14 * 9;
+                drawRect(var22, var18, var22 + var13 - 1, var18 + 8, 553648127);
+                GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+                GL11.glEnable(GL11.GL_ALPHA_TEST);
+
+                if (var16 < var47.size())
+                {
+                    GuiPlayerInfo var49 = (GuiPlayerInfo)var47.get(var16);
+                    ScorePlayerTeam var33 = this.mc.theWorld.getScoreboard().getPlayersTeam(var49.name);
+                    String var50 = ScorePlayerTeam.func_96667_a(var33, var49.name);
+                    var8.drawStringWithShadow(var50, var22, var18, 16777215);
+
+                    if (var44 != null)
+                    {
+                        var21 = var22 + var8.getStringWidth(var50) + 5;
+                        var23 = var22 + var13 - 12 - 5;
+
+                        if (var23 - var21 > 5)
+                        {
+                            Score var35 = var44.getScoreboard().func_96529_a(var49.name, var44);
+                            var36 = EnumChatFormatting.YELLOW + "" + var35.func_96652_c();
+                            var8.drawStringWithShadow(var36, var23 - var8.getStringWidth(var36), var18, 16777215);
+                        }
+                    }
+
+                    GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+                    this.mc.renderEngine.bindTexture("/gui/icons.png");
+                    byte var51 = 0;
+                    boolean var52 = false;
+
+                    if (var49.responseTime < 0)
+                    {
+                        var20 = 5;
+                    }
+                    else if (var49.responseTime < 150)
+                    {
+                        var20 = 0;
+                    }
+                    else if (var49.responseTime < 300)
+                    {
+                        var20 = 1;
+                    }
+                    else if (var49.responseTime < 600)
+                    {
+                        var20 = 2;
+                    }
+                    else if (var49.responseTime < 1000)
+                    {
+                        var20 = 3;
+                    }
+                    else
+                    {
+                        var20 = 4;
+                    }
+
+                    this.zLevel += 100.0F;
+                    this.drawTexturedModalRect(var22 + var13 - 12, var18, 0 + var51 * 10, 176 + var20 * 8, 10, 8);
+                    this.zLevel -= 100.0F;
+                }
+            }
+        }
+
+        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        GL11.glDisable(GL11.GL_LIGHTING);
+        GL11.glEnable(GL11.GL_ALPHA_TEST);
+    }
+	
 	private void func_96136_a(ScoreObjective par1ScoreObjective, int par2, int par3, FontRenderer par4FontRenderer)
 	{
 		Scoreboard var5 = par1ScoreObjective.getScoreboard();
@@ -1371,95 +1319,153 @@ public class GuiIngame extends Gui
 	
 	private int m_iFoodOverlayShakeCounter = 0;
 	
-	private void DrawFoodOverlay( int iScreenX, int iScreenY )
-	{
-		FoodStats stats = mc.thePlayer.getFoodStats();
-		
-		int iHungerPenalty = mc.thePlayer.GetHungerPenaltyLevel();
-		
-		int iFoodLevel = stats.getFoodLevel();
-		float fSaturationLevel = stats.getSaturationLevel();
-		int iSaturationPips = (int)( ( stats.getSaturationLevel() + 0.124F ) * 4F );
-		
-		int iFullHungerPips = iFoodLevel / 6;
-		
-		if ( mc.thePlayer.m_bExhaustionAddedSinceLastGuiUpdate )
-		{
-			m_iFoodOverlayShakeCounter = 20;
-			
-			mc.thePlayer.m_bExhaustionAddedSinceLastGuiUpdate = false;
-		}
-		else if ( m_iFoodOverlayShakeCounter > 0 )
-		{
-			m_iFoodOverlayShakeCounter--;
-		}
-		
-		for ( int iTempCount = 0; iTempCount < 10; ++iTempCount )
-		{
-			int iShankScreenY = iScreenY;
-			int iShankTextureOffsetX = 16;
-			byte iBackgroundTextureOffsetX = 0;
-
-			if ( mc.thePlayer.isPotionActive( Potion.hunger ) )
-			{
-				iShankTextureOffsetX += 36;
-				iBackgroundTextureOffsetX = 13;
-			}
-			else if ( iTempCount < iSaturationPips >> 3 )
-			{
-				iBackgroundTextureOffsetX = 1;
-			}
-
-			if ( iHungerPenalty > 0 && updateCounter % ( iFoodLevel * 5 + 1 ) == 0 )
-			{
-				iShankScreenY = iScreenY + (this.rand.nextInt(3) - 1);
-			}
-			else if ( m_iFoodOverlayShakeCounter > 0 )
-			{
-				int iShakeAmount = /*rand.nextInt( 2 ) +*/ 1;
-				
-				if ( rand.nextInt( 2 ) == 0 )
-				{
-					iShakeAmount = -iShakeAmount;
-				}
-				
-				iShankScreenY = iScreenY + iShakeAmount;
-			}
-
-			int iShankScreenX = iScreenX - iTempCount * 8 - 9;
-			
-			drawTexturedModalRect( iShankScreenX, iShankScreenY, 16 + iBackgroundTextureOffsetX * 9, 27, 9, 9 );
-			
-			if ( iTempCount == iSaturationPips >> 3 )
-			{
-				if ( !mc.thePlayer.isPotionActive( Potion.hunger ) )
-				{
-					int iPartialPips = iSaturationPips % 8;
-					
-					if ( iPartialPips != 0 )
-					{
-						// draw partial pips
-						
-						drawTexturedModalRect( iShankScreenX + 8 - iPartialPips, iShankScreenY, 25 + 8 - iPartialPips, 27, 1 + iPartialPips, 9 );
-					}
-				}
-			}
-
-			if ( iTempCount < iFullHungerPips )
-			{
-				drawTexturedModalRect( iShankScreenX, iShankScreenY, iShankTextureOffsetX + 36, 27, 9, 9);
-			}
-			else if ( iTempCount == iFullHungerPips )
-			{
-				int iPartialPips = iFoodLevel % 6;
-				
-				if ( iPartialPips != 0 )
-				{
-					drawTexturedModalRect( iShankScreenX + 7 - iPartialPips, iShankScreenY, iShankTextureOffsetX + 36 + 7 - iPartialPips, 27, 3 + iPartialPips, 9);
-				}
-			}
-		}        
-	}
+	private void DrawFoodOverlay(int var1, int var2)
+    {
+        FoodStats var3 = this.mc.thePlayer.getFoodStats();
+        int var4 = this.mc.thePlayer.GetHungerPenaltyLevel();
+        int var5 = var3.getFoodLevel();
+        float var6 = var3.getSaturationLevel();
+        int var7 = (int)((var3.getSaturationLevel() + 0.124F) * 4.0F);
+        int var8 = var5 / 6;
+
+        if (this.mc.thePlayer.m_bExhaustionAddedSinceLastGuiUpdate)
+        {
+            this.m_iFoodOverlayShakeCounter = 20;
+            this.mc.thePlayer.m_bExhaustionAddedSinceLastGuiUpdate = false;
+        }
+        else if (this.m_iFoodOverlayShakeCounter > 0)
+        {
+            --this.m_iFoodOverlayShakeCounter;
+        }
+
+        for (int var9 = 0; var9 < 10; ++var9)
+        {
+            int var10 = var2;
+            int var11 = 16;
+            byte var12 = 0;
+
+            if (this.mc.thePlayer.isPotionActive(Potion.hunger))
+            {
+                var11 += 36;
+                var12 = 13;
+            }
+            else if (var9 < var7 >> 3)
+            {
+                var12 = 1;
+            }
+
+            int var13;
+
+            if (var4 > 0 && this.updateCounter % (var5 * 5 + 1) == 0)
+            {
+                var10 = var2 + (this.rand.nextInt(3) - 1);
+            }
+            else if (this.m_iFoodOverlayShakeCounter > 0)
+            {
+                var13 = 1;
+
+                if (this.rand.nextInt(2) == 0)
+                {
+                    var13 = -var13;
+                }
+
+                var10 = var2 + var13;
+            }
+
+            var13 = var1 - var9 * 8 - 9;
+            this.drawTexturedModalRect(var13, var10, 16 + var12 * 9, 27, 9, 9);
+            int var14;
+
+            if (var9 == var7 >> 3 && !this.mc.thePlayer.isPotionActive(Potion.hunger))
+            {
+                var14 = var7 % 8;
+
+                if (var14 != 0)
+                {
+                    this.drawTexturedModalRect(var13 + 8 - var14, var10, 33 - var14, 27, 1 + var14, 9);
+                }
+            }
+
+            if (var9 < var8)
+            {
+                this.drawTexturedModalRect(var13, var10, var11 + 36, 27, 9, 9);
+            }
+            else if (var9 == var8)
+            {
+                var14 = var5 % 6;
+
+                if (var14 != 0)
+                {
+                    this.drawTexturedModalRect(var13 + 7 - var14, var10, var11 + 36 + 7 - var14, 27, 3 + var14, 9);
+                }
+            }
+        }
+        
+        
+        //COPY
+        for (int i_20 = 10; i_20 < 20; ++i_20)
+        {
+            int var10 = var2;
+            int var11 = 16;
+            byte var12 = 0;
+
+            if (this.mc.thePlayer.isPotionActive(Potion.hunger))
+            {
+                var11 += 36;
+                var12 = 13;
+            }
+            else if (i_20 < var7 >> 3)
+            {
+                var12 = 1;
+            }
+
+            int var13;
+
+            if (var4 > 0 && this.updateCounter % (var5 * 5 + 1) == 0)
+            {
+                var10 = var2 + (this.rand.nextInt(3) - 1);
+            }
+            else if (this.m_iFoodOverlayShakeCounter > 0)
+            {
+                var13 = 1;
+
+                if (this.rand.nextInt(2) == 0)
+                {
+                    var13 = -var13;
+                }
+
+                var10 = var2 + var13;
+            }
+            var10 -= 10;
+            var13 = var1 - (i_20-10) * 8 - 9;
+            this.drawTexturedModalRect(var13, var10, 16 + var12 * 9, 27, 9, 9);
+            int var14;
+
+            if (i_20 == var7 >> 3 && !this.mc.thePlayer.isPotionActive(Potion.hunger))
+            {
+                var14 = var7 % 8;
+
+                if (var14 != 0)
+                {
+                    this.drawTexturedModalRect(var13 + 8 - var14, var10, 33 - var14, 27, 1 + var14, 9);
+                }
+            }
+
+            if (i_20 < var8)
+            {
+                this.drawTexturedModalRect(var13, var10, var11 + 36, 27, 9, 9);
+            }
+            else if (i_20 == var8)
+            {
+                var14 = var5 % 6;
+
+                if (var14 != 0)
+                {
+                    this.drawTexturedModalRect(var13 + 7 - var14, var10, var11 + 36 + 7 - var14, 27, 3 + var14, 9);
+                }
+            }
+        }
+    }
 	
 	public static final String[] sHealthPenaltyDescriptions = new String[] { "Invalid", "Hurt", "Injured", "Wounded", "Crippled", "Dying" };
 	public static final String[] sHungerPenaltyDescriptions = new String[] { "Invalid", "Peckish", "Hungry", "Famished", "Starving", "Dying" };
diff --git a/minecraft/net/minecraft/src/ItemMap.java b/minecraft/net/minecraft/src/ItemMap.java
index 15fcb07..75c302a 100644
--- a/minecraft/net/minecraft/src/ItemMap.java
+++ b/minecraft/net/minecraft/src/ItemMap.java
@@ -318,8 +318,21 @@ public class ItemMap extends ItemMapBase
 				EntityPlayer var7 = (EntityPlayer)par3Entity;
 				var6.updateVisiblePlayers(var7, par1ItemStack);
 			}
-
-			if (par5)
+			
+			InventoryPlayer inventory = par3Entity.inventory;
+			int slot = inventory.currentItem;
+			ItemStack nextStack = inventory.getStackInSlot((slot+1)%9);
+			ItemStack prevStack = inventory.getStackInSlot((slot+8)%9);
+			boolean o =
+				par3Entity.ridingEntity instanceof EntityBoat &&
+				inventory.getCurrentItem() != null &&
+				inventory.getCurrentItem().itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID &&
+				(
+					(nextStack != null && this.itemID == nextStack.itemID) ||
+					(prevStack != null && this.itemID == prevStack.itemID)
+					);
+
+			if (par5 || o)
 			{
 				this.updateMapData(par2World, par3Entity, var6);
 			}
diff --git a/minecraft_server/net/minecraft/src/EntityCreature.java b/minecraft_server/net/minecraft/src/EntityCreature.java
index 8fb2bf7..3244c1d 100644
--- a/minecraft_server/net/minecraft/src/EntityCreature.java
+++ b/minecraft_server/net/minecraft/src/EntityCreature.java
@@ -43,7 +43,7 @@ public abstract class EntityCreature extends EntityLiving
 		}
 
 		this.hasAttacked = this.isMovementCeased();
-		float var1 = 16.0F;
+		float var1 = 32.0F;
 
 		if (this.entityToAttack == null)
 		{
diff --git a/minecraft_server/net/minecraft/src/EntityCreeper.java b/minecraft_server/net/minecraft/src/EntityCreeper.java
index fcd0429..d1e3c7e 100644
--- a/minecraft_server/net/minecraft/src/EntityCreeper.java
+++ b/minecraft_server/net/minecraft/src/EntityCreeper.java
@@ -140,11 +140,11 @@ public class EntityCreeper extends EntityMob
 
 					if (this.getPowered())
 					{
-						this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, (float)(this.explosionRadius * 2), var2);
+						this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, (float)(this.explosionRadius * 2), YYStuffAndThings.yyCreeperFire, var2);
 					}
 					else
 					{
-						this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, (float)this.explosionRadius, var2);
+						this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, (float)this.explosionRadius, YYStuffAndThings.yyCreeperFire, var2);
 					}
 
 					this.setDead();
diff --git a/minecraft_server/net/minecraft/src/EntityFishHook.java b/minecraft_server/net/minecraft/src/EntityFishHook.java
index 48e1ea5..89926f8 100644
--- a/minecraft_server/net/minecraft/src/EntityFishHook.java
+++ b/minecraft_server/net/minecraft/src/EntityFishHook.java
@@ -504,7 +504,7 @@ public class EntityFishHook extends Entity
 
 		for ( int iTempI = i - 2; iTempI <= i + 2; iTempI++ )
 		{
-			for ( int iTempJ = j - 2; iTempJ <= j; iTempJ++ )
+			for ( int iTempJ = j - 1; iTempJ <= j; iTempJ++ )
 			{
 				for ( int iTempK = k - 2; iTempK <= k + 2; iTempK++ )
 				{
@@ -546,7 +546,7 @@ public class EntityFishHook extends Entity
 					{
 						// in the rain
 						
-						iBiteOdds /= 2;
+						iBiteOdds /= 20;
 					}
 				}
 			}
@@ -565,7 +565,7 @@ public class EntityFishHook extends Entity
 				{
 					// in the rain
 					
-					iBiteOdds /= 2;
+					iBiteOdds /= 6;
 				}
 			}
 	
diff --git a/minecraft_server/net/minecraft/src/EntityItem.java b/minecraft_server/net/minecraft/src/EntityItem.java
index 4fad945..b68f35d 100644
--- a/minecraft_server/net/minecraft/src/EntityItem.java
+++ b/minecraft_server/net/minecraft/src/EntityItem.java
@@ -748,7 +748,7 @@ public class EntityItem extends Entity
 		// using getTotalWorldTime() here so that /time commands and time advancement due to HC Spawn don't affect it
 		
 		if (!worldObj.isRemote) {
-			m_lAbsoluteItemDespawnTime = MinecraftServer.getServer().worldServers[0].getTotalWorldTime() + 24000L;
+			m_lAbsoluteItemDespawnTime = MinecraftServer.getServer().worldServers[0].getTotalWorldTime() + 144000000L;
 		}
 	}
 	
diff --git a/minecraft_server/net/minecraft/src/EntityPlayer.java b/minecraft_server/net/minecraft/src/EntityPlayer.java
index 88dfbc4..0335d9e 100644
--- a/minecraft_server/net/minecraft/src/EntityPlayer.java
+++ b/minecraft_server/net/minecraft/src/EntityPlayer.java
@@ -8,6 +8,7 @@ import net.minecraft.src.EntityPlayer.BeaconRespawnValidationResult.BeaconStatus
 
 public abstract class EntityPlayer extends EntityLiving implements ICommandSender
 {
+	public static final int YY_EXTRA_HEALTH = 20;
 	/** Inventory of the player */
 	public InventoryPlayer inventory = new InventoryPlayer(this);
 	private InventoryEnderChest theInventoryEnderChest = new InventoryEnderChest();
@@ -118,7 +119,7 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 
 	public int getMaxHealth()
 	{
-		return 20;
+		return 20+YY_EXTRA_HEALTH;
 	}
 
 	protected void entityInit()
@@ -2373,13 +2374,13 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	@Override
 	public boolean CanJump()
 	{		
-		return health > 4 && foodStats.getFoodLevel() > 12 && (int)foodStats.getSaturationLevel() < 18;
+		return this.GetHealthPenaltyLevel() <= 3 && this.GetHungerPenaltyLevel() <= 2 && this.GetFatPenaltyLevel() <= 3;
 	}
 	
 	@Override
 	public boolean CanSwim()
 	{		
-		return !isWeighted() && health > 4;
+		return !this.isWeighted() && this.GetHealthPenaltyLevel() <= 3;
 	}
 	
 	@Override
@@ -2591,7 +2592,7 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	
 	public boolean HasStatusPenalty()
 	{
-		return getHealth() <= 10 || foodStats.getFoodLevel() <= 24 || (int)foodStats.getSaturationLevel() >= 12;
+		return this.GetHealthPenaltyLevel() > 0 || this.GetHungerPenaltyLevel() > 0 || this.GetFatPenaltyLevel() > 0;
 	}
 	
 	public int GetMaximumStatusPenaltyLevel()
@@ -3086,13 +3087,16 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	protected boolean IsPlayerHoldingSail()
 	{
 		ItemStack currentItemStack = inventory.mainInventory[inventory.currentItem];
-		
-		if ( currentItemStack != null )
-		{
-			return currentItemStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID;
-		}
-		
-		return false;
+		int slot = inventory.currentItem;
+		ItemStack nextStack = inventory.getStackInSlot((slot+1)%9);
+		ItemStack prevStack = inventory.getStackInSlot((slot+8)%9);
+		
+		boolean o = inventory.getCurrentItem() != null &&
+			inventory.getCurrentItem().itemID == Item.map.itemID &&(
+				(nextStack != null && nextStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID) ||
+				(prevStack != null && prevStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID)
+			);
+		return (currentItemStack != null ? currentItemStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID : false) || o;
 	}
 	
 	@Override
diff --git a/minecraft_server/net/minecraft/src/EntityPlayerMP.java b/minecraft_server/net/minecraft/src/EntityPlayerMP.java
index 7aeff1d..772834c 100644
--- a/minecraft_server/net/minecraft/src/EntityPlayerMP.java
+++ b/minecraft_server/net/minecraft/src/EntityPlayerMP.java
@@ -1251,89 +1251,89 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 
 	@Override
 	protected void UpdateFatPenaltyLevel()
-	{
-		int iFat = (int)foodStats.getSaturationLevel();
-		int iFatLevel = 4;
-		
-		if ( iFat < 12 )
-		{
-			iFatLevel = 0;
-		}
-		else if ( iFat < 14 )
-		{
-			iFatLevel = 1;
-		}
-		else if ( iFat < 16 )
-		{
-			iFatLevel = 2;
-		}
-		else if ( iFat < 18 )
-		{
-			iFatLevel = 3;
-		}
-		
-		SetFatPenaltyLevel( iFatLevel );
-	}
+    {
+        int var1 = (int)this.foodStats.getSaturationLevel();
+        byte var2 = 4;
+
+        if (var1 < 26)
+        {
+            var2 = 0;
+        }
+        else if (var1 < 29)
+        {
+            var2 = 1;
+        }
+        else if (var1 < 32)
+        {
+            var2 = 2;
+        }
+        else if (var1 < 36)
+        {
+            var2 = 3;
+        }
+
+        this.SetFatPenaltyLevel(var2);
+    }
 	
 	@Override
 	protected void UpdateHungerPenaltyLevel()
-	{
-		int iHunger = foodStats.getFoodLevel();
-		int iPenaltyLevel = 5;
-		
-		if ( iHunger > 24 )
-		{
-			iPenaltyLevel = 0;
-		}
-		else if ( iHunger > 18 )
-		{
-			iPenaltyLevel = 1;
-		}
-		else if ( iHunger > 12 )
-		{
-			iPenaltyLevel = 2;
-		}
-		else if ( iHunger > 6 )
-		{
-			iPenaltyLevel = 3;
-		}
-		else if ( iHunger > 0 || foodStats.getSaturationLevel() > 0F )
-		{
-			iPenaltyLevel = 4;
-		}
-		
-		SetHungerPenaltyLevel( iPenaltyLevel );
-	}
+    {
+        int var1 = this.foodStats.getFoodLevel();
+        byte var2 = 5;
+
+        if (var1 > 36)
+        {
+            var2 = 0;
+        }
+        else if (var1 > 27)
+        {
+            var2 = 1;
+        }
+        else if (var1 > 18)
+        {
+            var2 = 2;
+        }
+        else if (var1 > 9)
+        {
+            var2 = 3;
+        }
+        else if (var1 > 0 || this.foodStats.getSaturationLevel() > 0.0F)
+        {
+            var2 = 4;
+        }
+
+        this.SetHungerPenaltyLevel(var2);
+    }
 	
 	@Override
 	protected void UpdateHealthPenaltyLevel()
-	{
-		int iHealth = getHealth();
-		int iPenaltyLevel = 5;
-		
-		if ( iHealth > 10 )
-		{
-			iPenaltyLevel = 0;
-		}
-		else if ( iHealth > 8 )
-		{
-			iPenaltyLevel = 1;
-		}
-		else if ( iHealth > 6 )
-		{
-			iPenaltyLevel = 2;
-		}
-		else if ( iHealth > 4 )
-		{
-			iPenaltyLevel = 3;
-		}
-		else if ( iHealth > 2 )
-		{
-			iPenaltyLevel = 4;
-		}
-		
-		SetHealthPenaltyLevel( iPenaltyLevel );
-	}
+    {
+        int var1 = this.getHealth();
+        byte var2 = 5;
+
+        if (var1 > 15)
+        {
+            var2 = 0;
+        }
+        else if (var1 > 12)
+        {
+            var2 = 1;
+        }
+        else if (var1 > 9)
+        {
+            var2 = 2;
+        }
+        else if (var1 > 6)
+        {
+            var2 = 3;
+        }
+        else if (var1 > 3)
+        {
+            var2 = 4;
+        }
+
+        this.SetHealthPenaltyLevel(var2);
+    }
 	
 	private boolean IsInGloom()
 	{
diff --git a/minecraft_server/net/minecraft/src/FoodStats.java b/minecraft_server/net/minecraft/src/FoodStats.java
index 4518192..6a9bda6 100644
--- a/minecraft_server/net/minecraft/src/FoodStats.java
+++ b/minecraft_server/net/minecraft/src/FoodStats.java
@@ -2,12 +2,13 @@ package net.minecraft.src;
 
 public class FoodStats
 {
+	private int YY_FOOD = 120;
 	/** The player's food level. */
 	// FCMOD: Code change to increase food meter resolution
 	/*
 	private int foodLevel = 20;
 	*/
-	private int foodLevel = 60;
+	private int foodLevel = YY_FOOD;
 	// END FCMOD
 
 	/** The player's food saturation. */
@@ -28,7 +29,7 @@ public class FoodStats
 	/*
 	private int prevFoodLevel = 20;
 	*/
-	private int prevFoodLevel = 60;
+	private int prevFoodLevel = YY_FOOD;
 	// END FCMOD
 
 	/**
@@ -114,7 +115,7 @@ public class FoodStats
 	// END FCMOD
 
 	/**
-	 * Reads the food data for the player.
+	 * Reads food stats from an NBT object.
 	 */
 	public void readNBT(NBTTagCompound par1NBTTagCompound)
 	{
@@ -134,21 +135,21 @@ public class FoodStats
 			
 			// sanity check the values as apparently they can get fucked up when importing from vanilla
 			
-			if ( foodLevel > 60 || foodLevel < 0 )
+			if (this.foodLevel > YY_FOOD || this.foodLevel < 0)
 			{
-				foodLevel = 60;
+				this.foodLevel = YY_FOOD;
 			}
 			
-			if ( foodSaturationLevel > 20F || foodSaturationLevel < 0F )
+			if (this.foodSaturationLevel > 40.0F || this.foodSaturationLevel < 0.0F)
 			{
-				foodSaturationLevel = 20F;
+				this.foodSaturationLevel = 40.0F;
 			}
 			// END FCMOD
 		}
 	}
 
 	/**
-	 * Writes the food data for the player.
+	 * Writes food stats to an NBT object.
 	 */
 	public void writeNBT(NBTTagCompound par1NBTTagCompound)
 	{
@@ -170,8 +171,13 @@ public class FoodStats
 		return this.foodLevel;
 	}
 
+	public int getPrevFoodLevel()
+	{
+		return this.prevFoodLevel;
+	}
+
 	/**
-	 * Get whether the player must eat food.
+	 * If foodLevel is not max.
 	 */
 	public boolean needFood()
 	{
@@ -179,7 +185,7 @@ public class FoodStats
 		/*
 		return this.foodLevel < 20;
 		*/
-		return this.foodLevel < 60;    	
+		return this.foodLevel < YY_FOOD;
 		// END FCMOD
 	}
 
@@ -188,7 +194,7 @@ public class FoodStats
 	 */
 	public void addExhaustion(float par1)
 	{
-		this.foodExhaustionLevel = Math.min(this.foodExhaustionLevel + par1, 40.0F);
+		this.foodExhaustionLevel = Math.min(this.foodExhaustionLevel + par1, 40.0F);        
 	}
 
 	/**
@@ -199,18 +205,16 @@ public class FoodStats
 		return this.foodSaturationLevel;
 	}
 
-	// FCMOD: Added to match client
 	public void setFoodLevel(int par1)
 	{
 		this.foodLevel = par1;
 	}
-	
+
 	public void setFoodSaturationLevel(float par1)
 	{
 		this.foodSaturationLevel = par1;
-	}    
-	// END FCMOD
-
+	}
+	
 	// FCMOD: Added New
 	/**
 	 * Note that iFoodGain is one third regular hunger gained, with 6 units being a full pip
@@ -219,7 +223,7 @@ public class FoodStats
 	{
 		int iPreviousFoodLevel = foodLevel;
 		
-		foodLevel = Math.min( iFoodGain + foodLevel, 60);
+		this.foodLevel = Math.min(iFoodGain + this.foodLevel, YY_FOOD);
 		
 		int iExcessFood = iFoodGain - ( foodLevel - iPreviousFoodLevel );
 		
@@ -227,7 +231,7 @@ public class FoodStats
 		{
 			// divide by 3 due to increased resolution
 			
-			foodSaturationLevel = Math.min( foodSaturationLevel + (float)iExcessFood * fFatMultiplier / 3F, 20F );
+			foodSaturationLevel = Math.min( foodSaturationLevel + (float)iExcessFood * fFatMultiplier / 3F, 40F );
 		}
 	}
 	
@@ -238,7 +242,7 @@ public class FoodStats
 		int iDifficulty = player.worldObj.difficultySetting;
 		
 		prevFoodLevel = foodLevel;
-
+		
 		if ( iDifficulty > 0 )
 		{
 			// burn hunger
@@ -264,11 +268,11 @@ public class FoodStats
 			foodExhaustionLevel = 0F;
 		}
 
-		if ( foodLevel > 24 && player.shouldHeal() )
+		if ( player.GetHungerPenaltyLevel() == 0 && player.shouldHeal() )
 		{
 			++foodTimer;
 
-			if ( foodTimer >= 600 ) // once every 30 seconds
+			if ( foodTimer >= 6000 ) // once every 30 seconds
 			{
 				player.heal( 1 );
 				foodTimer = 0;
@@ -303,6 +307,6 @@ public class FoodStats
 		// only burn fat when the corresponding hunger pip is completely depleted
 		
 		return foodSaturationLevel > (float)( ( foodLevel + 5 ) / 6 ) * 2F;    	
-	}
+	}    
 	// END FCMOD    
 }
diff --git a/minecraft_server/net/minecraft/src/ItemMap.java b/minecraft_server/net/minecraft/src/ItemMap.java
index 3b6ec1d..1924dc8 100644
--- a/minecraft_server/net/minecraft/src/ItemMap.java
+++ b/minecraft_server/net/minecraft/src/ItemMap.java
@@ -302,8 +302,21 @@ public class ItemMap extends ItemMapBase
 				EntityPlayer var7 = (EntityPlayer)par3Entity;
 				var6.updateVisiblePlayers(var7, par1ItemStack);
 			}
-
-			if (par5)
+			
+			InventoryPlayer inventory = par3Entity.inventory;
+			int slot = inventory.currentItem;
+			ItemStack nextStack = inventory.getStackInSlot((slot+1)%9);
+			ItemStack prevStack = inventory.getStackInSlot((slot+8)%9);
+			boolean o =
+				par3Entity.ridingEntity instanceof EntityBoat &&
+				inventory.getCurrentItem() != null &&
+				inventory.getCurrentItem().itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID &&
+				(
+					(nextStack != null && this.itemID == nextStack.itemID) ||
+					(prevStack != null && this.itemID == prevStack.itemID)
+					);
+
+			if (par5 || o)
 			{
 				this.updateMapData(par2World, par3Entity, var6);
 			}
