diff --git a/minecraft/net/minecraft/src/Entity.java b/minecraft/net/minecraft/src/Entity.java
index fb35e3d..926bade 100644
--- a/minecraft/net/minecraft/src/Entity.java
+++ b/minecraft/net/minecraft/src/Entity.java
@@ -147,7 +147,7 @@ public abstract class Entity
 	 * The amount of ticks you have to stand inside of fire before be set on fire
 	 */
 	public int fireResistance;
-	private int fire;
+	public int fire;
 
 	/**
 	 * Whether this entity is currently inside of water (if it handles water movement that is)
@@ -416,6 +416,15 @@ public abstract class Entity
 	 */
 	public void onUpdate()
 	{
+		if(fire>0)
+		{
+			FCUtilsBlockPos lightpos = new FCUtilsBlockPos(MathHelper.floor_double( posX ),
+			MathHelper.floor_double(posY), MathHelper.floor_double( posZ));
+			if ( fire > 0 && worldObj.getBlockId(lightpos.i, lightpos.j, lightpos.k)==0)
+			{
+				worldObj.setBlock(lightpos.i, lightpos.j, lightpos.k, DLMain.lightsourceinvis.blockID,0 ,2);
+			}
+		}
 		this.onEntityUpdate();
 	}
 
diff --git a/minecraft/net/minecraft/src/EntityAnimal.java b/minecraft/net/minecraft/src/EntityAnimal.java
index 393dc08..9da24e3 100644
--- a/minecraft/net/minecraft/src/EntityAnimal.java
+++ b/minecraft/net/minecraft/src/EntityAnimal.java
@@ -101,7 +101,7 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 	 */
 	protected void attackEntity(Entity par1Entity, float par2)
 	{
-		if (par1Entity instanceof EntityPlayer)
+		if (par1Entity instanceof EntityPlayer || par1Entity instanceof FCEntityWolf)
 		{
 			if (par2 < 3.0F)
 			{
@@ -232,6 +232,10 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 			 */
 			resetInLove();
 			PanickNearbyAnimals( par1DamageSource );
+			if(par1DamageSource.getEntity() instanceof EntityPlayer)
+			{
+				hasInteractedWithPlayer = true;
+			}
 			// END FCMOD
 			return super.attackEntityFrom(par1DamageSource, par2);
 		}
@@ -489,6 +493,8 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 	protected static final int m_iInLoveDataWatcherID = 22;
 	protected static final int m_iWearingBreedingHarnessDataWatcherID = 23;
 
+	protected boolean hasInteractedWithPlayer = true;
+	
 	@Override
 	protected void entityInit()
 	{
@@ -509,6 +515,8 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 		tag.setBoolean( "BreedingHarness", getWearingBreedingHarness() );
 		tag.setInteger( "fcHungerCnt", m_iHungerCountdown );
 		tag.setInteger( "fcHealCnt", m_iHealingCountdown );
+		
+		tag.setBoolean("hasInteractedWithPlayer", hasInteractedWithPlayer);
 	}
 
 	@Override
@@ -545,6 +553,11 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 		{
 			ResetHealingCountdown();
 		}
+		
+		if(tag.hasKey("hasInteractedWithPlayer"))
+		{
+			hasInteractedWithPlayer = tag.getBoolean("hasInteractedWithPlayer");
+		}
 	}
 
 	@Override
@@ -680,7 +693,7 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 	@Override
 	public boolean IsSecondaryTargetForSquid()
 	{
-		return true;
+		return hasInteractedWithPlayer;
 	}
 
 	@Override
@@ -750,6 +763,10 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 
 	public void setInLove( int iInLove )
 	{
+		if(iInLove>0)
+		{
+			hasInteractedWithPlayer = true;
+		}
 		dataWatcher.updateObject( m_iInLoveDataWatcherID, Integer.valueOf( iInLove ) );
 	}
 
@@ -1221,8 +1238,13 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 
 	public boolean IsTemptingItem( ItemStack stack )
 	{
-		return GetItemFoodValue( stack ) > 0 || 
+		boolean result = GetItemFoodValue( stack ) > 0 || 
 				( isBreedingItem( stack ) && IsReadyToEatBreedingItem() );
+		if(result)
+		{
+			hasInteractedWithPlayer = true;
+		}
+		return result;
 	}
 
 	public boolean IsEdibleItem( ItemStack stack )
@@ -1372,6 +1394,7 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 	{
 		ItemStack heldItem = player.inventory.getCurrentItem();
 
+		hasInteractedWithPlayer = true;
 		if ( heldItem != null )
 		{
 			if ( IsEdibleItem( heldItem ) )
diff --git a/minecraft/net/minecraft/src/EntityArrow.java b/minecraft/net/minecraft/src/EntityArrow.java
index 68e0da5..3d5156a 100644
--- a/minecraft/net/minecraft/src/EntityArrow.java
+++ b/minecraft/net/minecraft/src/EntityArrow.java
@@ -172,6 +172,12 @@ public class EntityArrow extends Entity implements IProjectile
 	public void onUpdate()
 	{
 		super.onUpdate();
+		FCUtilsBlockPos lightpos = new FCUtilsBlockPos(MathHelper.floor_double( posX ),
+		MathHelper.floor_double(posY), MathHelper.floor_double( posZ));
+		if ( fire > 0 && worldObj.getBlockId(lightpos.i, lightpos.j, lightpos.k)==0)
+		{
+			worldObj.setBlock(lightpos.i, lightpos.j, lightpos.k, DLMain.lightsourceinvis.blockID,0 ,2);
+		}
 
 		if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F)
 		{
diff --git a/minecraft/net/minecraft/src/EntityCreeper.java b/minecraft/net/minecraft/src/EntityCreeper.java
index 5252d4f..ce30c71 100644
--- a/minecraft/net/minecraft/src/EntityCreeper.java
+++ b/minecraft/net/minecraft/src/EntityCreeper.java
@@ -140,11 +140,11 @@ public class EntityCreeper extends EntityMob
 
 					if (this.getPowered())
 					{
-						this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, (float)(this.explosionRadius * 2), var2);
+						this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, (float)(this.explosionRadius * 2), YYStuffAndThings.yyCreeperFire, var2);
 					}
 					else
 					{
-						this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, (float)this.explosionRadius, var2);
+						this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, (float)this.explosionRadius, YYStuffAndThings.yyCreeperFire, var2);
 					}
 
 					this.setDead();
diff --git a/minecraft/net/minecraft/src/EntityFireball.java b/minecraft/net/minecraft/src/EntityFireball.java
index ffdc798..caeabd6 100644
--- a/minecraft/net/minecraft/src/EntityFireball.java
+++ b/minecraft/net/minecraft/src/EntityFireball.java
@@ -76,6 +76,13 @@ public abstract class EntityFireball extends Entity
 		}
 		else
 		{
+			FCUtilsBlockPos lightpos = new FCUtilsBlockPos(MathHelper.floor_double( posX ),
+			MathHelper.floor_double(boundingBox.maxY), MathHelper.floor_double( posZ));
+			if (worldObj.getBlockId(lightpos.i, lightpos.j, lightpos.k)==0)
+			{
+				worldObj.setBlock(lightpos.i, lightpos.j, lightpos.k, DLMain.lightsourceinvis.blockID,0 ,2);
+			}
+			
 			super.onUpdate();
 			this.setFire(1);
 
diff --git a/minecraft/net/minecraft/src/EntityFishHook.java b/minecraft/net/minecraft/src/EntityFishHook.java
index b732510..68fb886 100644
--- a/minecraft/net/minecraft/src/EntityFishHook.java
+++ b/minecraft/net/minecraft/src/EntityFishHook.java
@@ -580,7 +580,7 @@ public class EntityFishHook extends Entity
 
 		for ( int iTempI = i - 2; iTempI <= i + 2; iTempI++ )
 		{
-			for ( int iTempJ = j - 2; iTempJ <= j; iTempJ++ )
+			for ( int iTempJ = j - 1; iTempJ <= j; iTempJ++ )
 			{
 				for ( int iTempK = k - 2; iTempK <= k + 2; iTempK++ )
 				{
@@ -622,7 +622,7 @@ public class EntityFishHook extends Entity
 					{
 						// in the rain
 						
-						iBiteOdds /= 2;
+						iBiteOdds /= 20;
 					}
 				}
 			}
@@ -641,7 +641,7 @@ public class EntityFishHook extends Entity
 				{
 					// in the rain
 					
-					iBiteOdds /= 2;
+					iBiteOdds /= 6;
 				}
 			}
 	
diff --git a/minecraft/net/minecraft/src/EntityItem.java b/minecraft/net/minecraft/src/EntityItem.java
index 98e5268..ef8f911 100644
--- a/minecraft/net/minecraft/src/EntityItem.java
+++ b/minecraft/net/minecraft/src/EntityItem.java
@@ -135,6 +135,32 @@ public class EntityItem extends Entity
 		
 		++this.age;
 
+		if(!worldObj.isRemote)
+		{
+			ItemStack stack = getEntityItem();
+			YYMeatDecay decay = YYMeatDecay.getDecay(stack);
+			if(decay != null)
+			{
+				int decayNumber = decay.getDecayNumber(stack, rand);
+				if(decayNumber!=0)
+				{
+					if(stack.stackSize == decayNumber)
+					{
+						this.setDead();
+					}
+					else
+					{
+						stack.stackSize -= decayNumber;
+						setEntityItemStack(stack);
+					}
+					if(decay.to != null)
+					{
+						FCUtilsItem.EjectStackWithRandomVelocity(worldObj, posX, posY, posZ, new ItemStack(decay.to, decayNumber));
+					}
+				}
+			}
+		}
+		
 		// FCMOD: Code change
 		/*
 		if (!this.worldObj.isRemote && this.age >= 6000)
@@ -291,6 +317,9 @@ public class EntityItem extends Entity
 		
 		// FCMOD: Code added
 		par1NBTTagCompound.setLong( "fcDespawnTime", m_lAbsoluteItemDespawnTime );
+		
+		par1NBTTagCompound.setString("yyDroppedByPlayerDeath", droppedByPlayerDeath);
+		par1NBTTagCompound.setInteger("yyNDeath", nDeath);
 		// END FCMOD    
 	}
 
@@ -309,7 +338,16 @@ public class EntityItem extends Entity
 		{
 			m_lAbsoluteItemDespawnTime = par1NBTTagCompound.getLong( "fcDespawnTime" );
 		}
-		// END FCMOD	    
+		
+		if(par1NBTTagCompound.hasKey("yyDroppedByPlayerDeath"))
+		{
+			droppedByPlayerDeath = par1NBTTagCompound.getString("yyDroppedByPlayerDeath");
+		}
+		if(par1NBTTagCompound.hasKey("yyNDeath"))
+		{
+			nDeath = par1NBTTagCompound.getInteger("yyNDeath");
+		}
+		// END FCMOD
 		
 		if (this.getEntityItem() == null)
 		{
@@ -425,6 +463,9 @@ public class EntityItem extends Entity
 	// FCMOD: Code added    
 	private long m_lAbsoluteItemDespawnTime = 0;
 	
+	public String droppedByPlayerDeath = "";
+	public int nDeath = -1;
+	
 	private void UpdateHardcoreBuoy()
 	{
 		if ( FCBetterThanWolves.IsHardcoreBuoyEnabled( worldObj ) )
@@ -726,7 +767,23 @@ public class EntityItem extends Entity
 	{
 		if ( !worldObj.isRemote )
 		{
-			if ( m_lAbsoluteItemDespawnTime > 0 )
+			if(nDeath > -1)
+			{
+				EntityPlayer player = MinecraftServer.getServer().worldServers[0].getPlayerEntityByName(droppedByPlayerDeath);
+				if(player == null)
+				{
+					NBTTagCompound nbt = ((SaveHandler)MinecraftServer.getServer().worldServers[0].getSaveHandler()).getPlayerData(droppedByPlayerDeath);
+					if(nbt.hasKey("yyNumberOfDeaths") && nDeath < nbt.getInteger("yyNumberOfDeaths") - 10)
+					{
+						setDead();
+					}
+				}
+				else if(nDeath < player.numberOfDeaths - 10)
+				{
+					setDead();
+				}
+			}
+			else if ( m_lAbsoluteItemDespawnTime > 0 )
 			{
 				// using getTotalWorldTime() here so that /time commands and time advancement due to HC Spawn don't affect it
 				
@@ -752,7 +809,8 @@ public class EntityItem extends Entity
 		// using getTotalWorldTime() here so that /time commands and time advancement due to HC Spawn don't affect it
 		
 		if (!worldObj.isRemote) {
-			m_lAbsoluteItemDespawnTime = MinecraftServer.getServer().worldServers[0].getTotalWorldTime() + 24000L;
+			droppedByPlayerDeath = player.username;
+			nDeath = player.numberOfDeaths;
 		}
 	}
 	
diff --git a/minecraft/net/minecraft/src/EntityPigZombie.java b/minecraft/net/minecraft/src/EntityPigZombie.java
index 2996f13..0cbfbbf 100644
--- a/minecraft/net/minecraft/src/EntityPigZombie.java
+++ b/minecraft/net/minecraft/src/EntityPigZombie.java
@@ -8,7 +8,7 @@ public class EntityPigZombie extends FCEntityZombie
 // END FCMOD
 {
 	/** Above zero if this PigZombie is Angry. */
-	private int angerLevel = 0;
+	protected int angerLevel = 0;
 
 	/** A random delay until this PigZombie next makes a sound. */
 	private int randomSoundDelay = 0;
diff --git a/minecraft/net/minecraft/src/EntityPlayer.java b/minecraft/net/minecraft/src/EntityPlayer.java
index 3d2d78d..b5efc6a 100644
--- a/minecraft/net/minecraft/src/EntityPlayer.java
+++ b/minecraft/net/minecraft/src/EntityPlayer.java
@@ -1,9 +1,6 @@
 package net.minecraft.src;
 
 import java.io.InputStreamReader;
-import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.util.Collection;
@@ -113,10 +110,6 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	 * An instance of a fishing rod's hook. If this isn't null, the icon image of the fishing rod is slightly different
 	 */
 	public EntityFishHook fishEntity = null;
-	
-	//Dynamic Lights TODO
-	private int dynamicLightUpdateTimer=0;
-	public boolean isholdingtorch =false;
 
 	public EntityPlayer(World par1World)
 	{
@@ -137,7 +130,33 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 
 	public int getMaxHealth()
 	{
-		return 20;
+		return dataWatcher.getWatchableObjectInt(maxHealthAndFoodDataWatcherID) & 0x0000FFFF;
+	}
+	
+	public void setMaxHealth(int maxHealth)
+	{
+		maxHealth = Math.min(maxHealth, 140);
+		maxHealth = Math.max(maxHealth, 35);
+		dataWatcher.updateObject(
+			maxHealthAndFoodDataWatcherID,
+			(dataWatcher.getWatchableObjectInt(maxHealthAndFoodDataWatcherID) & 0xFFFF0000) + maxHealth
+		);
+	}
+	
+	public int getMaxFood()
+	{
+		return (dataWatcher.getWatchableObjectInt(maxHealthAndFoodDataWatcherID) & 0xFFFF0000) >> 16;
+	}
+	
+	public void setMaxFood(int maxFood)
+	{
+		maxFood = Math.min(maxFood, 120);
+		maxFood = Math.max(maxFood, 60);
+		dataWatcher.updateObject(
+			maxHealthAndFoodDataWatcherID,
+			(dataWatcher.getWatchableObjectInt(maxHealthAndFoodDataWatcherID) & 0x0000FFFF) + (maxFood << 16)
+		);
+		foodStats.setMaxFood(getMaxFood());
 	}
 
 	protected void entityInit()
@@ -159,6 +178,8 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 		dataWatcher.addObject( m_iSpawnChunksVisualizationLocationIDataWatcherID, new Integer( 0 ) );
 		dataWatcher.addObject( m_iSpawnChunksVisualizationLocationJDataWatcherID, new Integer( 0 ) );
 		dataWatcher.addObject( m_iSpawnChunksVisualizationLocationKDataWatcherID, new Integer( 0 ) );
+		
+		dataWatcher.addObject(maxHealthAndFoodDataWatcherID, Integer.valueOf(0x003C0046));
 		// END FCMOD
 	}
 
@@ -370,49 +391,27 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 		// FCMOD: Added
 		UpdateModStatusVariables();
 		// END FCMOD
-		//Dynamic Lights TODO
-		if (!worldObj.isRemote)
+
+		if (isholdingtorch())
 		{
-			dynamicLightUpdateTimer++;
-			if (isholdingtorch ||dynamicLightUpdateTimer >9)
+			FCUtilsBlockPos lightpos = new FCUtilsBlockPos(MathHelper.floor_double( posX ),
+			MathHelper.floor_double(boundingBox.maxY), MathHelper.floor_double( posZ));
+			if (worldObj.getBlockId(lightpos.i, lightpos.j, lightpos.k)==0)
 			{
-				ItemStack heldItem = getHeldItem();
-				dynamicLightUpdateTimer=0;
-				if (heldItem!= null && isDynamicLightSource(heldItem.itemID))
-				{
-					isholdingtorch =true;
-//        			System.out.println(this + " is holding " + getHeldItem());
-				}
-				else
-				{
-					isholdingtorch =false;
-				}
-				
-				if (isholdingtorch) 
-				{
-					FCUtilsBlockPos lightpos = new FCUtilsBlockPos(MathHelper.floor_double( posX ), 
-							MathHelper.floor_double(boundingBox.maxY), MathHelper.floor_double( posZ));
-					if (worldObj.getBlockId(lightpos.i, lightpos.j, lightpos.k)==0)
-					{
 					worldObj.setBlock(lightpos.i, lightpos.j, lightpos.k, DLMain.lightsourceinvis.blockID,0 ,2);
-					worldObj.scheduleBlockUpdate(lightpos.i, lightpos.j, lightpos.k, DLMain.lightsourceinvis.blockID, DLLightSource.lightSourceTickRate);
-					}
-				}
 			}
 		}
-
 	}
-	
-	public boolean isDynamicLightSource(int itemID)
+
+	public boolean isholdingtorch()
 	{
-//    	Block.blocksList[itemID].lightValue>0 TODO
-		if(itemID==FCBetterThanWolves.fcBlockTorchNetherBurning.blockID || itemID==FCBetterThanWolves.fcBlockTorchFiniteBurning.blockID)
-		{
-			return true;
-		}
-		return false;
+		ItemStack held = getHeldItem();
+		if(held==null) return false;
+		int itemID = getHeldItem().itemID;
+		return itemID==FCBetterThanWolves.fcBlockTorchNetherBurning.blockID ||
+				itemID==FCBetterThanWolves.fcBlockTorchFiniteBurning.blockID ||
+				itemID==YYStuffAndThings.yyBlockTorchSparklingBurning.blockID;
 	}
-	
 
 	/**
 	 * Return the amount of time this entity should stay in a portal before being transported.
@@ -594,7 +593,7 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 			--this.flyToggleTimer;
 		}
 
-		if (this.worldObj.difficultySetting == 0 && this.getHealth() < this.getMaxHealth() && this.ticksExisted % 20 * 12 == 0)
+		if (this.worldObj.difficultySetting == 0 && this.getHealth() < this.getMaxHealth() && this.ticksExisted % 20 * 10 == 0)
 		{
 			this.heal(1);
 		}
@@ -1008,6 +1007,19 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	 */
 	public boolean attackEntityFrom(DamageSource par1DamageSource, int par2)
 	{
+		if(("thrown".equals(par1DamageSource.getDamageType()) && par2==0) || "cactus".equals(par1DamageSource.getDamageType()))
+		{
+			par2 = 1;
+		}
+		else if(par1DamageSource.isExplosion())
+		{
+			par2 *= 4;
+		}
+		else
+		{
+			par2 = (int)(par2 * 3.5);
+		}
+		
 		if (this.isEntityInvulnerable())
 		{
 			return false;
@@ -1191,6 +1203,16 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 		}
 	}
 
+	protected int applyArmorCalculations(DamageSource source, int damage)
+	{
+		if(!source.isUnblockable())
+		{
+			this.damageArmor(damage*2/7);
+			damage = damage*(25-getTotalArmorValue())/25;
+		}
+		return damage;
+	}
+	
 	/**
 	 * Displays the furnace GUI for the passed in furnace entity. Args: tileEntityFurnace
 	 */
@@ -2148,7 +2170,7 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 			return false;
 		}
 		// END FCMOD
-		return (par1 || this.foodStats.needFood()) && !this.capabilities.disableDamage;
+		return (par1 || this.foodStats.needFood(this)) && !this.capabilities.disableDamage;
 	}
 
 	/**
@@ -2221,49 +2243,15 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	public boolean canPlayerEdit(int par1, int par2, int par3, int par4, ItemStack par5ItemStack)
 	{
 		// FCMOD: Code added to prevent the player from placing blocks while in mid air
-		boolean disableHardcoreBouncing = false;
-
-		try {
-			Class decoManagerClass;
-
-			if (FCUtilsReflection.isObfuscated()) {
-				decoManagerClass = Class.forName("net.minecraft.src.DecoManager");
-			}
-			else {
-				decoManagerClass = Class.forName("DecoManager");
-			}
-
-			Method decoInstanceGetter = decoManagerClass.getDeclaredMethod("getInstance");
-			FCAddOn decoInstance = (FCAddOn) decoInstanceGetter.invoke(null);
-
-			Field disableHarcoreBouncingField = decoManagerClass.getDeclaredField("disableHardcoreBouncing");
-			disableHardcoreBouncing = (Boolean) disableHarcoreBouncingField.get(decoInstance);
-		} catch (ClassNotFoundException e) {
-
-		} catch (NoSuchMethodException e) {
-			e.printStackTrace();
-		} catch (SecurityException e) {
-			e.printStackTrace();
-		} catch (IllegalAccessException e) {
-			e.printStackTrace();
-		} catch (IllegalArgumentException e) {
-			e.printStackTrace();
-		} catch (InvocationTargetException e) {
-			e.printStackTrace();
-		} catch (NoSuchFieldException e) {
-			e.printStackTrace();
-		}
-		
-		if (disableHardcoreBouncing) {
-			if (!capabilities.isCreativeMode && !onGround && !inWater && !isOnLadder() && ridingEntity == null && !handleLavaMovement())
-			{
-				return false;
-			}
+		if ( !capabilities.isCreativeMode && !onGround && !inWater && !isOnLadder() && ridingEntity == null && !handleLavaMovement() )
+		{
+			return FCBetterThanWolves.allowPlaceWhileJumping;
 		}
 		// END FCMOD
-
+		
 		return this.capabilities.allowEdit ? true : (par5ItemStack != null ? par5ItemStack.func_82835_x() : false);
 	}
+
 	/**
 	 * Get the experience points the entity currently has.
 	 */
@@ -2317,6 +2305,13 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	 */
 	public void clonePlayer(EntityPlayer par1EntityPlayer, boolean par2)
 	{
+		this.numberOfDeaths = par1EntityPlayer.numberOfDeaths;
+		this.setMaxHealth(par1EntityPlayer.getMaxHealth());
+		this.setMaxFood(par1EntityPlayer.getMaxFood());
+		if(!par2)
+		{
+			this.numberOfDeaths++;
+		}
 		if (par2)
 		{
 			this.inventory.copyInventory(par1EntityPlayer.inventory);
@@ -2498,11 +2493,15 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	private static final int m_iSpawnChunksVisualizationLocationJDataWatcherID = 30;
 	private static final int m_iSpawnChunksVisualizationLocationKDataWatcherID = 31;
 	
+	private static final int maxHealthAndFoodDataWatcherID = 19;
+	
 	private static final int m_iTicksBetweenEmoteSounds = 10;
 	
 	public static final float m_fExhaustionJumping = 0.2F;
 	public static final float m_fExhaustionJumpingSprinting = 1.0F;
 	
+	public int numberOfDeaths = 0;
+	
 	protected void ReadModDataFromNBT( NBTTagCompound tag )
 	{
 		if ( tag.hasKey( "fcTimeOfLastSpawnAssignment" ) )
@@ -2534,6 +2533,16 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 		{
 			m_iInGloomCounter = tag.getInteger( "fcGloomCounter" );
 		}
+		
+		if(tag.hasKey("yyMaxHealth"))
+		{
+			setMaxHealth(tag.getInteger("yyMaxHealth"));
+			setMaxFood(6*getMaxHealth()/7);
+		}
+		if(tag.hasKey("yyNumberOfDeaths"))
+		{
+			numberOfDeaths = tag.getInteger("yyNumberOfDeaths");
+		}
 	}
 	
 	protected void WriteModDataToNBT( NBTTagCompound tag )
@@ -2553,6 +2562,9 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	 	
 	 	tag.setInteger( "fcGloomLevel", GetGloomLevel() );
 	 	tag.setInteger( "fcGloomCounter", m_iInGloomCounter );
+	 	
+	 	tag.setInteger("yyMaxHealth", getMaxHealth());
+	 	tag.setInteger("yyNumberOfDeaths", numberOfDeaths);
 	}
 	
 	@Override
@@ -2625,13 +2637,13 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	@Override
 	public boolean CanJump()
 	{		
-		return health > 4 && foodStats.getFoodLevel() > 12 && (int)foodStats.getSaturationLevel() < 18;
+		return this.GetHealthPenaltyLevel() <= 3 && this.GetHungerPenaltyLevel() <= 2 && this.GetFatPenaltyLevel() <= 3;
 	}
 	
 	@Override
 	public boolean CanSwim()
 	{		
-		return !isWeighted() && health > 4;
+		return !this.isWeighted() && this.GetHealthPenaltyLevel() <= 3;
 	}
 	
 	@Override
@@ -2776,7 +2788,7 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	{
 		float fModifier = GetHealthAndExhaustionModifier();
 		
-		if ( GetGloomLevel() > 0 )
+		if (GetGloomLevel() > 0 && !this.capabilities.isCreativeMode)
 		{
 			fModifier *= 0.5F;
 		}
@@ -2799,7 +2811,13 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	@Override
 	protected float GetLadderVerticalMovementModifier()
 	{
-		return GetHealthAndExhaustionModifierWithSightlessModifier();
+		float modifier = GetHealthAndExhaustionModifierWithSightlessModifier(); 
+		
+		if (this.isUsingItem()) {
+			modifier *= 0.5F;
+		}
+		
+		return modifier;
 	}    
 	
 	protected float GetJumpingHorizontalMovementModifier()        
@@ -2843,11 +2861,15 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	
 	public boolean HasStatusPenalty()
 	{
-		return getHealth() <= 10 || foodStats.getFoodLevel() <= 24 || (int)foodStats.getSaturationLevel() >= 12;
+		return this.GetHealthPenaltyLevel() > 0 || this.GetHungerPenaltyLevel() > 0 || this.GetFatPenaltyLevel() > 0;
 	}
 	
 	public int GetMaximumStatusPenaltyLevel()
 	{
+		if (this.capabilities.isCreativeMode) {
+			return 0;
+		}
+		
 		int iMaximumPenaltyLevel = GetHealthPenaltyLevel();
 		int iHungerPenaltyLevel = GetHungerPenaltyLevel();
 		
@@ -3338,13 +3360,16 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	protected boolean IsPlayerHoldingSail()
 	{
 		ItemStack currentItemStack = inventory.mainInventory[inventory.currentItem];
-		
-		if ( currentItemStack != null )
-		{
-			return currentItemStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID;
-		}
-		
-		return false;
+		int slot = inventory.currentItem;
+		ItemStack nextStack = inventory.getStackInSlot((slot+1)%9);
+		ItemStack prevStack = inventory.getStackInSlot((slot+8)%9);
+		
+		boolean o = inventory.getCurrentItem() != null &&
+			inventory.getCurrentItem().itemID == Item.map.itemID &&(
+				(nextStack != null && nextStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID) ||
+				(prevStack != null && prevStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID)
+			);
+		return (currentItemStack != null ? currentItemStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID : false) || o;
 	}
 	
 	@Override
diff --git a/minecraft/net/minecraft/src/EntityPlayerMP.java b/minecraft/net/minecraft/src/EntityPlayerMP.java
index a2e44cc..7231f05 100644
--- a/minecraft/net/minecraft/src/EntityPlayerMP.java
+++ b/minecraft/net/minecraft/src/EntityPlayerMP.java
@@ -1173,14 +1173,14 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 	
 	private void UpdateHealthAndHungerEffects()
 	{
-		if ( !isDead && ( worldObj.getTotalWorldTime() + (long)entityId ) % 80L == 0L && !this.capabilities.isCreativeMode )
+		if ( !isDead && ( worldObj.getTotalWorldTime() + (long)entityId ) % 80L == 0L )
 		{
 			if ( foodStats.getFoodLevel() <= 0 && foodStats.getSaturationLevel() <= 0F )
 			{
 				addPotionEffect( new PotionEffect( Potion.confusion.getId(), 180, 0, true ) );                            
 			}
 			
-			if ( health <= 2 )
+			if ( GetHealthPenaltyLevel()>= 5 )
 			{
 				addPotionEffect( new PotionEffect( Potion.blindness.getId(), 180, 0, true ) );                            
 			}
@@ -1192,7 +1192,7 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 	{
 		if ( !isDead )
 		{
-			if ( IsInGloom() && !this.capabilities.isCreativeMode )
+			if ( IsInGloom() )
 			{
 				m_iInGloomCounter++;
 				
@@ -1246,94 +1246,26 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 	@Override
 	protected void UpdateFatPenaltyLevel()
 	{
-		int iFat = (int)foodStats.getSaturationLevel();
-		int iFatLevel = 4;
-		
-		if ( iFat < 12 || this.capabilities.isCreativeMode)
-		{
-			iFatLevel = 0;
-		}
-		else if ( iFat < 14 )
-		{
-			iFatLevel = 1;
-		}
-		else if ( iFat < 16 )
-		{
-			iFatLevel = 2;
-		}
-		else if ( iFat < 18 )
-		{
-			iFatLevel = 3;
-		}
-		
-		SetFatPenaltyLevel( iFatLevel );
+		SetFatPenaltyLevel(YYUtilsPenalties.getFatPenaltyLevel((int)foodStats.getSaturationLevel(), getMaxFood()));
 	}
 	
 	@Override
 	protected void UpdateHungerPenaltyLevel()
 	{
-		int iHunger = foodStats.getFoodLevel();
-		int iPenaltyLevel = 5;
-		
-		if ( iHunger > 24 || this.capabilities.isCreativeMode )
-		{
-			iPenaltyLevel = 0;
-		}
-		else if ( iHunger > 18 )
-		{
-			iPenaltyLevel = 1;
-		}
-		else if ( iHunger > 12 )
-		{
-			iPenaltyLevel = 2;
-		}
-		else if ( iHunger > 6 )
-		{
-			iPenaltyLevel = 3;
-		}
-		else if ( iHunger > 0 || foodStats.getSaturationLevel() > 0F )
-		{
-			iPenaltyLevel = 4;
-		}
-		
-		SetHungerPenaltyLevel( iPenaltyLevel );
+		SetHungerPenaltyLevel(YYUtilsPenalties.getHungerPenaltyLevel(foodStats.getFoodLevel(), getMaxFood()));
 	}
 	
 	@Override
 	protected void UpdateHealthPenaltyLevel()
 	{
-		int iHealth = getHealth();
-		int iPenaltyLevel = 5;
-		
-		if ( iHealth > 10 || this.capabilities.isCreativeMode )
-		{
-			iPenaltyLevel = 0;
-		}
-		else if ( iHealth > 8 )
-		{
-			iPenaltyLevel = 1;
-		}
-		else if ( iHealth > 6 )
-		{
-			iPenaltyLevel = 2;
-		}
-		else if ( iHealth > 4 )
-		{
-			iPenaltyLevel = 3;
-		}
-		else if ( iHealth > 2 )
-		{
-			iPenaltyLevel = 4;
-		}
-		
-		SetHealthPenaltyLevel( iPenaltyLevel );
+		SetHealthPenaltyLevel(YYUtilsPenalties.getHealthPenaltyLevel(getHealth(), getMaxHealth()));
 	}
 	
 	private boolean IsInGloom()
 	{
 		if ( !capabilities.disableDamage ) // disable darkness effects in creative
 		{
-			if ( !isPotionActive( Potion.nightVision ) && worldObj.provider.dimensionId == 0 )
+			if ( !isPotionActive( Potion.nightVision ) && (worldObj.provider.dimensionId == 0 || worldObj.provider.dimensionId == -1) )
 			{
 				int i = MathHelper.floor_double( posX );
 				int j = MathHelper.floor_double( posY - yOffset );
diff --git a/minecraft/net/minecraft/src/EntityRenderer.java b/minecraft/net/minecraft/src/EntityRenderer.java
index 3b51e36..4ae8d6a 100644
--- a/minecraft/net/minecraft/src/EntityRenderer.java
+++ b/minecraft/net/minecraft/src/EntityRenderer.java
@@ -2068,7 +2068,7 @@ public class EntityRenderer
 		
 		if ( world != null )
 		{
-			if ( world.provider.dimensionId == 0 )
+			if ( world.provider.dimensionId == 0 || world.provider.dimensionId == -1 )
 			{
 				// isolating the overworld for gloom effects
 				
diff --git a/minecraft/net/minecraft/src/FoodStats.java b/minecraft/net/minecraft/src/FoodStats.java
index dcff638..7e54e56 100644
--- a/minecraft/net/minecraft/src/FoodStats.java
+++ b/minecraft/net/minecraft/src/FoodStats.java
@@ -2,12 +2,13 @@ package net.minecraft.src;
 
 public class FoodStats
 {
+	protected int maxFood = 60;
 	/** The player's food level. */
 	// FCMOD: Code change to increase food meter resolution
 	/*
 	private int foodLevel = 20;
 	*/
-	private int foodLevel = 60;
+	private int foodLevel = maxFood;
 	// END FCMOD
 
 	/** The player's food saturation. */
@@ -28,9 +29,16 @@ public class FoodStats
 	/*
 	private int prevFoodLevel = 20;
 	*/
-	private int prevFoodLevel = 60;
+	private int prevFoodLevel = maxFood;
 	// END FCMOD
 
+	public void setMaxFood(int maxFood)
+	{
+		maxFood = Math.min(maxFood, 120);
+		maxFood = Math.max(maxFood, 60);
+		this.maxFood = maxFood;
+	}
+	
 	/**
 	 * Args: int foodLevel, float foodSaturationModifier
 	 */
@@ -131,17 +139,21 @@ public class FoodStats
 				foodLevel = foodLevel * 3;
 				foodSaturationLevel = 0F;
 			}
+			if (par1NBTTagCompound.hasKey("yyMaxFood"))
+			{
+				maxFood = par1NBTTagCompound.getInteger("yyMaxFood");
+			}
 			
 			// sanity check the values as apparently they can get fucked up when importing from vanilla
 			
-			if ( foodLevel > 60 || foodLevel < 0 )
+			if ( foodLevel > maxFood || foodLevel < 0 )
 			{
-				foodLevel = 60;
+				foodLevel = maxFood;
 			}
 			
-			if ( foodSaturationLevel > 20F || foodSaturationLevel < 0F )
+			if ( foodSaturationLevel > maxFood/3F || foodSaturationLevel < 0F )
 			{
-				foodSaturationLevel = 20F;
+				foodSaturationLevel = maxFood/3F;
 			}
 			// END FCMOD
 		}
@@ -159,6 +171,8 @@ public class FoodStats
 		
 		// FCMOD: Code added
 		par1NBTTagCompound.setBoolean( "fcFoodLevelAdjusted", true );
+		
+		par1NBTTagCompound.setInteger("yyMaxFood", maxFood);
 		// END FCMOD
 	}
 
@@ -178,13 +192,13 @@ public class FoodStats
 	/**
 	 * If foodLevel is not max.
 	 */
-	public boolean needFood()
+	public boolean needFood(EntityPlayer player)
 	{
 		// FCMOD: Code changed
 		/*
 		return this.foodLevel < 20;
 		*/
-		return this.foodLevel < 60;    	
+		return this.foodLevel < player.getMaxFood();
 		// END FCMOD
 	}
 
@@ -222,7 +236,7 @@ public class FoodStats
 	{
 		int iPreviousFoodLevel = foodLevel;
 		
-		foodLevel = Math.min( iFoodGain + foodLevel, 60);
+		foodLevel = Math.min( iFoodGain + foodLevel, maxFood);
 		
 		int iExcessFood = iFoodGain - ( foodLevel - iPreviousFoodLevel );
 		
@@ -230,7 +244,7 @@ public class FoodStats
 		{
 			// divide by 3 due to increased resolution
 			
-			foodSaturationLevel = Math.min( foodSaturationLevel + (float)iExcessFood * fFatMultiplier / 3F, 20F );
+			foodSaturationLevel = Math.min( foodSaturationLevel + (float)iExcessFood * fFatMultiplier / 3F, maxFood / 3F );
 		}
 	}
 	
@@ -267,13 +281,13 @@ public class FoodStats
 			foodExhaustionLevel = 0F;
 		}
 
-		if ( foodLevel > 24 && player.shouldHeal() )
+		if ( player.GetHungerPenaltyLevel() == 0 && player.shouldHeal() )
 		{
 			++foodTimer;
 
-			if ( foodTimer >= 600 ) // once every 30 seconds
+			if ( foodTimer >= 1800 ) // once every 30 seconds
 			{
-				player.heal( 1 );
+				//player.heal( 1 );
 				foodTimer = 0;
 			}
 		}
diff --git a/minecraft/net/minecraft/src/GuiIngame.java b/minecraft/net/minecraft/src/GuiIngame.java
index ec30ae0..85a3e56 100644
--- a/minecraft/net/minecraft/src/GuiIngame.java
+++ b/minecraft/net/minecraft/src/GuiIngame.java
@@ -152,6 +152,10 @@ public class GuiIngame extends Gui
 
 				var47 = var7 - 39;
 				var22 = var47 - 10;
+				if(this.mc.thePlayer.getMaxHealth()>70)
+				{
+					var22 -= 10;
+				}
 				var23 = this.mc.thePlayer.getTotalArmorValue();
 				var24 = -1;
 
@@ -165,9 +169,9 @@ public class GuiIngame extends Gui
 				int var29;
 				int var28;
 
-				for (var25 = 0; var25 < 10; ++var25)
+				for (var25 = 0; var25 < Math.max(mc.thePlayer.getMaxHealth()/7, 10); ++var25)
 				{
-					if (var23 > 0)
+					if (var23 > 0 & var25<10)
 					{
 						var26 = var18 + var25 * 8;
 
@@ -205,10 +209,10 @@ public class GuiIngame extends Gui
 						var27 = 1;
 					}
 
-					var28 = var18 + var25 * 8;
+					var28 = var18 + (var25%10) * 8;
 					var29 = var47;
 
-					if (var12 <= 4)
+					if (mc.thePlayer.GetHealthPenaltyLevel()>=4)
 					{
 						var29 = var47 + this.rand.nextInt(2);
 					}
@@ -224,8 +228,15 @@ public class GuiIngame extends Gui
 					{
 						var30 = 5;
 					}
-
-					this.drawTexturedModalRect(var28, var29, 16 + var27 * 9, 9 * var30, 9, 9);
+					
+					if(var25>=10)
+					{
+						var29 -= 10;
+					}
+					if(var25<mc.thePlayer.getMaxHealth()/7)
+					{
+						this.drawTexturedModalRect(var28, var29, 16 + var27 * 9, 9 * var30, 9, 9);
+					}
 
 					if (var11)
 					{
@@ -240,15 +251,20 @@ public class GuiIngame extends Gui
 						}
 					}
 
-					if (var25 * 2 + 1 < var12)
+					if (var25 < var12/7)
 					{
 						this.drawTexturedModalRect(var28, var29, var26 + 36, 9 * var30, 9, 9);
 					}
+					else if (var25 == var12/7)
+					{
+						int partialHeart = var12%7;
+						drawTexturedModalRect(var28, var29, var26 + 36, 9 * var30, 1+partialHeart, 9);
+					}
 
-					if (var25 * 2 + 1 == var12)
+					/*if (var25 * 2 + 1 == var12)
 					{
 						this.drawTexturedModalRect(var28, var29, var26 + 45, 9 * var30, 9, 9);
-					}
+					}*/
 				}
 
 				this.mc.mcProfiler.endStartSection("food");
@@ -333,9 +349,10 @@ public class GuiIngame extends Gui
 							this.drawTexturedModalRect(var19 - var28 * 8 - 9, var22, 25, 18, 9, 9);
 						}
 					}
+					var22 -= 10;
 				}
 				// FCMOD: Added (client only)
-				else if ( !DrawPenaltyText( var19, var22 ) )
+				if ( !DrawPenaltyText( var19, var22 ) )
 				{                	
 					iSightlessTextOffset = 0;
 				}
@@ -1394,7 +1411,7 @@ public class GuiIngame extends Gui
 			m_iFoodOverlayShakeCounter--;
 		}
 		
-		for ( int iTempCount = 0; iTempCount < 10; ++iTempCount )
+		for ( int iTempCount = 0; iTempCount < this.mc.thePlayer.getMaxFood()/6; ++iTempCount )
 		{
 			int iShankScreenY = iScreenY;
 			int iShankTextureOffsetX = 16;
@@ -1426,8 +1443,12 @@ public class GuiIngame extends Gui
 				iShankScreenY = iScreenY + iShakeAmount;
 			}
 
-			int iShankScreenX = iScreenX - iTempCount * 8 - 9;
-			
+			int iShankScreenX = iScreenX - (iTempCount%10) * 8 - 9;
+
+			if(iTempCount>=10)
+			{
+				iShankScreenY -= 10;
+			}
 			drawTexturedModalRect( iShankScreenX, iShankScreenY, 16 + iBackgroundTextureOffsetX * 9, 27, 9, 9 );
 			
 			if ( iTempCount == iSaturationPips >> 3 )
diff --git a/minecraft/net/minecraft/src/ItemMap.java b/minecraft/net/minecraft/src/ItemMap.java
index 15fcb07..75c302a 100644
--- a/minecraft/net/minecraft/src/ItemMap.java
+++ b/minecraft/net/minecraft/src/ItemMap.java
@@ -318,8 +318,21 @@ public class ItemMap extends ItemMapBase
 				EntityPlayer var7 = (EntityPlayer)par3Entity;
 				var6.updateVisiblePlayers(var7, par1ItemStack);
 			}
-
-			if (par5)
+			
+			InventoryPlayer inventory = par3Entity.inventory;
+			int slot = inventory.currentItem;
+			ItemStack nextStack = inventory.getStackInSlot((slot+1)%9);
+			ItemStack prevStack = inventory.getStackInSlot((slot+8)%9);
+			boolean o =
+				par3Entity.ridingEntity instanceof EntityBoat &&
+				inventory.getCurrentItem() != null &&
+				inventory.getCurrentItem().itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID &&
+				(
+					(nextStack != null && this.itemID == nextStack.itemID) ||
+					(prevStack != null && this.itemID == prevStack.itemID)
+					);
+
+			if (par5 || o)
 			{
 				this.updateMapData(par2World, par3Entity, var6);
 			}
diff --git a/minecraft/net/minecraft/src/Potion.java b/minecraft/net/minecraft/src/Potion.java
index c5e68c5..af9035b 100644
--- a/minecraft/net/minecraft/src/Potion.java
+++ b/minecraft/net/minecraft/src/Potion.java
@@ -125,7 +125,7 @@ public class Potion
 		}
 		else if (this.id == poison.id)
 		{
-			if (par1EntityLiving.getHealth() > 1)
+			if (par1EntityLiving.getHealth() > 3 || !(par1EntityLiving instanceof EntityPlayer) && par1EntityLiving.getHealth() > 1)
 			{
 				par1EntityLiving.attackEntityFrom(DamageSource.magic, 1);
 			}
@@ -158,7 +158,12 @@ public class Potion
 		}
 		else if ( this.id == heal.id )
 		{
-			par1EntityLiving.heal(6 << par2);
+			int h = 6 << par2;
+			if(par1EntityLiving instanceof EntityPlayer)
+			{
+				h = h*7/2;
+			}
+			par1EntityLiving.heal(h);
 		}
 		// END FCMOD
 	}
@@ -207,6 +212,10 @@ public class Potion
 		// END FCMOD        
 		{
 			var6 = (int)(par4 * (double)(6 << par3) + 0.5D);
+			if(par1EntityLiving instanceof EntityPlayer)
+			{
+				var6 = var6*7/2;
+			}
 			par2EntityLiving.heal(var6);
 		}
 	}
@@ -244,6 +253,20 @@ public class Potion
 			return var3 > 0 ? par1 % var3 == 0 : true;
 		}
 	}
+	
+	public boolean isReady(int par1, int par2, EntityLiving entity)
+	{
+		if(this.id == regeneration.id && entity instanceof EntityPlayer)
+		{
+			int var3 = 25 >> par2;
+			var3 = var3*2/7;
+			return var3 > 0 ? par1 % var3 == 0 : true;
+		}
+		else
+		{
+			return isReady(par1, par2);
+		}
+	}
 
 	/**
 	 * Set the potion name.
diff --git a/minecraft/net/minecraft/src/PotionEffect.java b/minecraft/net/minecraft/src/PotionEffect.java
index ed06573..f5d8f40 100644
--- a/minecraft/net/minecraft/src/PotionEffect.java
+++ b/minecraft/net/minecraft/src/PotionEffect.java
@@ -114,7 +114,7 @@ public class PotionEffect
 	{
 		if (this.duration > 0)
 		{
-			if (Potion.potionTypes[this.potionID].isReady(this.duration, this.amplifier))
+			if (Potion.potionTypes[this.potionID].isReady(this.duration, this.amplifier, par1EntityLiving))
 			{
 				this.performEffect(par1EntityLiving);
 			}
diff --git a/minecraft/net/minecraft/src/SpawnerAnimals.java b/minecraft/net/minecraft/src/SpawnerAnimals.java
index 0fc2659..0862737 100644
--- a/minecraft/net/minecraft/src/SpawnerAnimals.java
+++ b/minecraft/net/minecraft/src/SpawnerAnimals.java
@@ -325,6 +325,7 @@ public final class SpawnerAnimals
 							}
 
 							// FCMOD: Added
+							((EntityAnimal)var21).hasInteractedWithPlayer=false;
 							var21.PreInitCreature();
 							// END FCMOD
 							var21.setLocationAndAngles((double)var18, (double)var19, (double)var20, par6Random.nextFloat() * 360.0F, 0.0F);
diff --git a/minecraft/net/minecraft/src/Teleporter.java b/minecraft/net/minecraft/src/Teleporter.java
index 433266c..2c7015d 100644
--- a/minecraft/net/minecraft/src/Teleporter.java
+++ b/minecraft/net/minecraft/src/Teleporter.java
@@ -73,7 +73,7 @@ public class Teleporter
 	 */
 	public boolean placeInExistingPortal(Entity par1Entity, double par2, double par4, double par6, float par8)
 	{
-		short var9 = 128;
+		int var9 = par1Entity.dimension==-1 ? 20 : 160;
 		double var10 = -1.0D;
 		int var12 = 0;
 		int var13 = 0;
diff --git a/minecraft/net/minecraft/src/WorldGenFire.java b/minecraft/net/minecraft/src/WorldGenFire.java
index 7743bc7..b5910f0 100644
--- a/minecraft/net/minecraft/src/WorldGenFire.java
+++ b/minecraft/net/minecraft/src/WorldGenFire.java
@@ -6,18 +6,6 @@ public class WorldGenFire extends WorldGenerator
 {
 	public boolean generate(World par1World, Random par2Random, int par3, int par4, int par5)
 	{
-		for (int var6 = 0; var6 < 64; ++var6)
-		{
-			int var7 = par3 + par2Random.nextInt(8) - par2Random.nextInt(8);
-			int var8 = par4 + par2Random.nextInt(4) - par2Random.nextInt(4);
-			int var9 = par5 + par2Random.nextInt(8) - par2Random.nextInt(8);
-
-			if (par1World.isAirBlock(var7, var8, var9) && par1World.getBlockId(var7, var8 - 1, var9) == Block.netherrack.blockID)
-			{
-				par1World.setBlock(var7, var8, var9, Block.fire.blockID, 0, 2);
-			}
-		}
-
 		return true;
 	}
 }
diff --git a/minecraft/net/minecraft/src/WorldProviderHell.java b/minecraft/net/minecraft/src/WorldProviderHell.java
index d9c3bf5..5066218 100644
--- a/minecraft/net/minecraft/src/WorldProviderHell.java
+++ b/minecraft/net/minecraft/src/WorldProviderHell.java
@@ -28,32 +28,7 @@ public class WorldProviderHell extends WorldProvider
 	 */
 	public Vec3 getFogColor(float par1, float par2, int x, int y, int z)
 	{
-		BiomeGenBase biome =  this.worldObj.getBiomeGenForCoords(x, z);
-		
-		if (biome instanceof BTABiomeGenNetherBase) {
-			Vec3[][] biomeColors = new Vec3[5][5];
-			
-			for (int i = 0; i < 5; i++) {
-				for (int j = 0; j < 5; j++) {
-					biomeColors[i][j] = ((BTABiomeGenNetherBase) this.worldObj.getBiomeGenForCoords(x - 2 + i, z - 2 + j)).getFogColor(this.worldObj);
-				}
-			}
-			
-			Vec3 color = this.worldObj.getWorldVec3Pool().getVecFromPool(0, 0, 0);
-			
-			for (int i = 0; i < 5; i++) {
-				for (int j = 0; j < 5; j++) {
-					color.xCoord += biomeColors[i][j].xCoord / 25;
-					color.yCoord += biomeColors[i][j].yCoord / 25;
-					color.zCoord += biomeColors[i][j].zCoord / 25;
-				}
-			}
-			
-			return color;
-		}
-		else {
-			return this.worldObj.getWorldVec3Pool().getVecFromPool(0.2, 0.03, 0.03);
-		}
+		return this.worldObj.getWorldVec3Pool().getVecFromPool(0.0, 0.0, 0.0);
 	}
 
 	/**
@@ -61,7 +36,7 @@ public class WorldProviderHell extends WorldProvider
 	 */
 	protected void generateLightBrightnessTable()
 	{
-		float var1 = 0.1F;
+		float var1 = 0.0F;
 
 		for (int var2 = 0; var2 <= 15; ++var2)
 		{

diff --git a/minecraft_server/net/minecraft/src/Entity.java b/minecraft_server/net/minecraft/src/Entity.java
index b5249a5..f2e286e 100644
--- a/minecraft_server/net/minecraft/src/Entity.java
+++ b/minecraft_server/net/minecraft/src/Entity.java
@@ -147,7 +147,7 @@ public abstract class Entity
 	 * The amount of ticks you have to stand inside of fire before be set on fire
 	 */
 	public int fireResistance;
-	private int fire;
+	public int fire;
 
 	/**
 	 * Whether this entity is currently inside of water (if it handles water movement that is)
@@ -357,6 +357,15 @@ public abstract class Entity
 	 */
 	public void onUpdate()
 	{
+		if(fire>0)
+		{
+			FCUtilsBlockPos lightpos = new FCUtilsBlockPos(MathHelper.floor_double( posX ),
+			MathHelper.floor_double(posY), MathHelper.floor_double( posZ));
+			if ( fire > 0 && worldObj.getBlockId(lightpos.i, lightpos.j, lightpos.k)==0)
+			{
+				worldObj.setBlock(lightpos.i, lightpos.j, lightpos.k, DLMain.lightsourceinvis.blockID,0 ,2);
+			}
+		}
 		this.onEntityUpdate();
 	}
 
diff --git a/minecraft_server/net/minecraft/src/EntityAnimal.java b/minecraft_server/net/minecraft/src/EntityAnimal.java
index 0c76d32..53f46d2 100644
--- a/minecraft_server/net/minecraft/src/EntityAnimal.java
+++ b/minecraft_server/net/minecraft/src/EntityAnimal.java
@@ -101,7 +101,7 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 	 */
 	protected void attackEntity(Entity par1Entity, float par2)
 	{
-		if (par1Entity instanceof EntityPlayer)
+		if (par1Entity instanceof EntityPlayer || par1Entity instanceof FCEntityWolf)
 		{
 			if (par2 < 3.0F)
 			{
@@ -232,6 +232,10 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 			*/
 			resetInLove();
 			PanickNearbyAnimals( par1DamageSource );
+			if(par1DamageSource.getEntity() instanceof EntityPlayer)
+			{
+				hasInteractedWithPlayer = true;
+			}
 			// END FCMOD
 			return super.attackEntityFrom(par1DamageSource, par2);
 		}
@@ -489,6 +493,8 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 	protected static final int m_iInLoveDataWatcherID = 22;
 	protected static final int m_iWearingBreedingHarnessDataWatcherID = 23;
 	
+	protected boolean hasInteractedWithPlayer = true;
+	
 	@Override
 	protected void entityInit()
 	{
@@ -509,6 +515,8 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 		tag.setBoolean( "BreedingHarness", getWearingBreedingHarness() );
 		tag.setInteger( "fcHungerCnt", m_iHungerCountdown );
 		tag.setInteger( "fcHealCnt", m_iHealingCountdown );
+		
+		tag.setBoolean("hasInteractedWithPlayer", hasInteractedWithPlayer);
 	}
 
 	@Override
@@ -545,6 +553,11 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 		{
 			ResetHealingCountdown();
 		}
+		
+		if(tag.hasKey("hasInteractedWithPlayer"))
+		{
+			hasInteractedWithPlayer = tag.getBoolean("hasInteractedWithPlayer");
+		}
 	}
 	
 	@Override
@@ -680,7 +693,7 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 	@Override
 	public boolean IsSecondaryTargetForSquid()
 	{
-		return true;
+		return hasInteractedWithPlayer;
 	}
 	
 	@Override
@@ -750,6 +763,10 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 	
 	public void setInLove( int iInLove )
 	{
+		if(iInLove>0)
+		{
+			hasInteractedWithPlayer = true;
+		}
 		dataWatcher.updateObject( m_iInLoveDataWatcherID, Integer.valueOf( iInLove ) );
 	}
    
@@ -1221,8 +1238,13 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 
 	public boolean IsTemptingItem( ItemStack stack )
 	{
-		return GetItemFoodValue( stack ) > 0 || 
-			( isBreedingItem( stack ) && IsReadyToEatBreedingItem() );
+		boolean result = GetItemFoodValue( stack ) > 0 || 
+				( isBreedingItem( stack ) && IsReadyToEatBreedingItem() );
+		if(result)
+		{
+			hasInteractedWithPlayer = true;
+		}
+		return result;
 	}
 	
 	public boolean IsEdibleItem( ItemStack stack )
@@ -1372,6 +1394,7 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimals
 	{
 		ItemStack heldItem = player.inventory.getCurrentItem();
 
+		hasInteractedWithPlayer = true;
 		if ( heldItem != null )
 		{
 			if ( IsEdibleItem( heldItem ) )
diff --git a/minecraft_server/net/minecraft/src/EntityArrow.java b/minecraft_server/net/minecraft/src/EntityArrow.java
index ad86fc2..579f0a2 100644
--- a/minecraft_server/net/minecraft/src/EntityArrow.java
+++ b/minecraft_server/net/minecraft/src/EntityArrow.java
@@ -141,7 +141,12 @@ public class EntityArrow extends Entity implements IProjectile
 	public void onUpdate()
 	{
 		super.onUpdate();
-
+		FCUtilsBlockPos lightpos = new FCUtilsBlockPos(MathHelper.floor_double( posX ),
+		MathHelper.floor_double(posY), MathHelper.floor_double( posZ));
+		if (fire > 0 && worldObj.getBlockId(lightpos.i, lightpos.j, lightpos.k)==0)
+		{
+			worldObj.setBlock(lightpos.i, lightpos.j, lightpos.k, DLMain.lightsourceinvis.blockID,0 ,2);
+		}
 		if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F)
 		{
 			float var1 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
diff --git a/minecraft_server/net/minecraft/src/EntityCreeper.java b/minecraft_server/net/minecraft/src/EntityCreeper.java
index fcd0429..d1e3c7e 100644
--- a/minecraft_server/net/minecraft/src/EntityCreeper.java
+++ b/minecraft_server/net/minecraft/src/EntityCreeper.java
@@ -140,11 +140,11 @@ public class EntityCreeper extends EntityMob
 
 					if (this.getPowered())
 					{
-						this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, (float)(this.explosionRadius * 2), var2);
+						this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, (float)(this.explosionRadius * 2), YYStuffAndThings.yyCreeperFire, var2);
 					}
 					else
 					{
-						this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, (float)this.explosionRadius, var2);
+						this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, (float)this.explosionRadius, YYStuffAndThings.yyCreeperFire, var2);
 					}
 
 					this.setDead();
diff --git a/minecraft_server/net/minecraft/src/EntityFireball.java b/minecraft_server/net/minecraft/src/EntityFireball.java
index a4d2f3a..542c320 100644
--- a/minecraft_server/net/minecraft/src/EntityFireball.java
+++ b/minecraft_server/net/minecraft/src/EntityFireball.java
@@ -65,6 +65,13 @@ public abstract class EntityFireball extends Entity
 		}
 		else
 		{
+			FCUtilsBlockPos lightpos = new FCUtilsBlockPos(MathHelper.floor_double( posX ),
+			MathHelper.floor_double(boundingBox.maxY), MathHelper.floor_double( posZ));
+			if (worldObj.getBlockId(lightpos.i, lightpos.j, lightpos.k)==0)
+			{
+				worldObj.setBlock(lightpos.i, lightpos.j, lightpos.k, DLMain.lightsourceinvis.blockID,0 ,2);
+			}
+			
 			super.onUpdate();
 			this.setFire(1);
 
diff --git a/minecraft_server/net/minecraft/src/EntityFishHook.java b/minecraft_server/net/minecraft/src/EntityFishHook.java
index 48e1ea5..89926f8 100644
--- a/minecraft_server/net/minecraft/src/EntityFishHook.java
+++ b/minecraft_server/net/minecraft/src/EntityFishHook.java
@@ -504,7 +504,7 @@ public class EntityFishHook extends Entity
 
 		for ( int iTempI = i - 2; iTempI <= i + 2; iTempI++ )
 		{
-			for ( int iTempJ = j - 2; iTempJ <= j; iTempJ++ )
+			for ( int iTempJ = j - 1; iTempJ <= j; iTempJ++ )
 			{
 				for ( int iTempK = k - 2; iTempK <= k + 2; iTempK++ )
 				{
@@ -546,7 +546,7 @@ public class EntityFishHook extends Entity
 					{
 						// in the rain
 						
-						iBiteOdds /= 2;
+						iBiteOdds /= 20;
 					}
 				}
 			}
@@ -565,7 +565,7 @@ public class EntityFishHook extends Entity
 				{
 					// in the rain
 					
-					iBiteOdds /= 2;
+					iBiteOdds /= 6;
 				}
 			}
 	
diff --git a/minecraft_server/net/minecraft/src/EntityItem.java b/minecraft_server/net/minecraft/src/EntityItem.java
index 4fad945..602199e 100644
--- a/minecraft_server/net/minecraft/src/EntityItem.java
+++ b/minecraft_server/net/minecraft/src/EntityItem.java
@@ -134,6 +134,32 @@ public class EntityItem extends Entity
 		}
 
 		++this.age;
+		
+		if(!worldObj.isRemote)
+		{
+			ItemStack stack = getEntityItem();
+			YYMeatDecay decay = YYMeatDecay.getDecay(stack);
+			if(decay != null)
+			{
+				int decayNumber = decay.getDecayNumber(stack, rand);
+				if(decayNumber!=0)
+				{
+					if(stack.stackSize == decayNumber)
+					{
+						this.setDead();
+					}
+					else
+					{
+						stack.stackSize -= decayNumber;
+						setEntityItemStack(stack);
+					}
+					if(decay.to != null)
+					{
+						FCUtilsItem.EjectStackWithRandomVelocity(worldObj, posX, posY, posZ, new ItemStack(decay.to, decayNumber));
+					}
+				}
+			}
+		}
 
 		// FCMOD: Code change
 		/*
@@ -291,6 +317,9 @@ public class EntityItem extends Entity
 		
 		// FCMOD: Code added
 		par1NBTTagCompound.setLong( "fcDespawnTime", m_lAbsoluteItemDespawnTime );
+		
+		par1NBTTagCompound.setString("yyDroppedByPlayerDeath", droppedByPlayerDeath);
+		par1NBTTagCompound.setInteger("yyNDeath", nDeath);
 		// END FCMOD    
 	}
 
@@ -309,6 +338,15 @@ public class EntityItem extends Entity
 		{
 			m_lAbsoluteItemDespawnTime = par1NBTTagCompound.getLong( "fcDespawnTime" );
 		}
+		
+		if(par1NBTTagCompound.hasKey("yyDroppedByPlayerDeath"))
+		{
+			droppedByPlayerDeath = par1NBTTagCompound.getString("yyDroppedByPlayerDeath");
+		}
+		if(par1NBTTagCompound.hasKey("yyNDeath"))
+		{
+			nDeath = par1NBTTagCompound.getInteger("yyNDeath");
+		}
 		// END FCMOD
 		
 		if (this.getEntityItem() == null)
@@ -421,6 +459,9 @@ public class EntityItem extends Entity
 	// FCMOD: Code added
 	private long m_lAbsoluteItemDespawnTime = 0;
 	
+	public String droppedByPlayerDeath = "";
+	public int nDeath = -1;
+	
 	private void UpdateHardcoreBuoy()
 	{
 		if ( FCBetterThanWolves.IsHardcoreBuoyEnabled( worldObj ) )
@@ -722,7 +763,23 @@ public class EntityItem extends Entity
 	{
 		if ( !worldObj.isRemote )
 		{
-			if ( m_lAbsoluteItemDespawnTime > 0 )
+			if(nDeath > -1)
+			{
+				EntityPlayer player = MinecraftServer.getServer().worldServers[0].getPlayerEntityByName(droppedByPlayerDeath);
+				if(player == null)
+				{
+					NBTTagCompound nbt = ((SaveHandler)MinecraftServer.getServer().worldServers[0].getSaveHandler()).getPlayerData(droppedByPlayerDeath);
+					if(nbt.hasKey("yyNumberOfDeaths") && nDeath < nbt.getInteger("yyNumberOfDeaths") - 10)
+					{
+						setDead();
+					}
+				}
+				else if(nDeath < player.numberOfDeaths - 10)
+				{
+					setDead();
+				}
+			}
+			else if ( m_lAbsoluteItemDespawnTime > 0 )
 			{
 				// using getTotalWorldTime() here so that /time commands and time advancement due to HC Spawn don't affect it
 				
@@ -748,7 +805,8 @@ public class EntityItem extends Entity
 		// using getTotalWorldTime() here so that /time commands and time advancement due to HC Spawn don't affect it
 		
 		if (!worldObj.isRemote) {
-			m_lAbsoluteItemDespawnTime = MinecraftServer.getServer().worldServers[0].getTotalWorldTime() + 24000L;
+			droppedByPlayerDeath = player.username;
+			nDeath = player.numberOfDeaths;
 		}
 	}
 	
diff --git a/minecraft_server/net/minecraft/src/EntityPigZombie.java b/minecraft_server/net/minecraft/src/EntityPigZombie.java
index 9c77c90..e462dee 100644
--- a/minecraft_server/net/minecraft/src/EntityPigZombie.java
+++ b/minecraft_server/net/minecraft/src/EntityPigZombie.java
@@ -8,7 +8,7 @@ public class EntityPigZombie extends FCEntityZombie
 // END FCMOD
 {
 	/** Above zero if this PigZombie is Angry. */
-	private int angerLevel = 0;
+	protected int angerLevel = 0;
 
 	/** A random delay until this PigZombie next makes a sound. */
 	private int randomSoundDelay = 0;
diff --git a/minecraft_server/net/minecraft/src/EntityPlayer.java b/minecraft_server/net/minecraft/src/EntityPlayer.java
index 593f682..9a907c1 100644
--- a/minecraft_server/net/minecraft/src/EntityPlayer.java
+++ b/minecraft_server/net/minecraft/src/EntityPlayer.java
@@ -1,8 +1,5 @@
 package net.minecraft.src;
 
-import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -101,10 +98,6 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	 * An instance of a fishing rod's hook. If this isn't null, the icon image of the fishing rod is slightly different
 	 */
 	public EntityFishHook fishEntity = null;
-	
-	//Dynamic Lights TODO
-	private int dynamicLightUpdateTimer=0;
-	public boolean isholdingtorch =false;
 
 	public EntityPlayer(World par1World)
 	{
@@ -125,7 +118,33 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 
 	public int getMaxHealth()
 	{
-		return 20;
+		return dataWatcher.getWatchableObjectInt(maxHealthAndFoodDataWatcherID) & 0x0000FFFF;
+	}
+	
+	public void setMaxHealth(int maxHealth)
+	{
+		maxHealth = Math.min(maxHealth, 140);
+		maxHealth = Math.max(maxHealth, 35);
+		dataWatcher.updateObject(
+			maxHealthAndFoodDataWatcherID,
+			(dataWatcher.getWatchableObjectInt(maxHealthAndFoodDataWatcherID) & 0xFFFF0000) + maxHealth
+		);
+	}
+	
+	public int getMaxFood()
+	{
+		return (dataWatcher.getWatchableObjectInt(maxHealthAndFoodDataWatcherID) & 0xFFFF0000) >> 16;
+	}
+	
+	public void setMaxFood(int maxFood)
+	{
+		maxFood = Math.min(maxFood, 120);
+		maxFood = Math.max(maxFood, 60);
+		dataWatcher.updateObject(
+			maxHealthAndFoodDataWatcherID,
+			(dataWatcher.getWatchableObjectInt(maxHealthAndFoodDataWatcherID) & 0x0000FFFF) + (maxFood << 16)
+		);
+		foodStats.setMaxFood(getMaxFood());
 	}
 
 	protected void entityInit()
@@ -147,6 +166,8 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 		dataWatcher.addObject( m_iSpawnChunksVisualizationLocationIDataWatcherID, new Integer( 0 ) );
 		dataWatcher.addObject( m_iSpawnChunksVisualizationLocationJDataWatcherID, new Integer( 0 ) );
 		dataWatcher.addObject( m_iSpawnChunksVisualizationLocationKDataWatcherID, new Integer( 0 ) );
+		
+		dataWatcher.addObject(maxHealthAndFoodDataWatcherID, Integer.valueOf(0x003C0046));
 		// END FCMOD
 	}
 
@@ -341,48 +362,29 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 		// FCMOD: Added
 		UpdateModStatusVariables();
 		// END FCMOD
-		//Dynamic Lights TODO
-		if (!worldObj.isRemote)
+		
+		if (isholdingtorch())
 		{
-			dynamicLightUpdateTimer++;
-			if (isholdingtorch ||dynamicLightUpdateTimer >9)
+			FCUtilsBlockPos lightpos = new FCUtilsBlockPos(MathHelper.floor_double( posX ),
+			MathHelper.floor_double(boundingBox.maxY), MathHelper.floor_double( posZ));
+			if (worldObj.getBlockId(lightpos.i, lightpos.j, lightpos.k)==0)
 			{
-				ItemStack heldItem = getHeldItem();
-				dynamicLightUpdateTimer=0;
-				if (heldItem!= null && isDynamicLightSource(heldItem.itemID))
-				{
-					isholdingtorch =true;
-//        			System.out.println(this + " is holding " + getHeldItem());
-				}
-				else
-				{
-					isholdingtorch =false;
-				}
-				
-				if (isholdingtorch) 
-				{
-					FCUtilsBlockPos lightpos = new FCUtilsBlockPos(MathHelper.floor_double( posX ), 
-							MathHelper.floor_double(boundingBox.maxY), MathHelper.floor_double( posZ));
-					if (worldObj.getBlockId(lightpos.i, lightpos.j, lightpos.k)==0)
-					{
 					worldObj.setBlock(lightpos.i, lightpos.j, lightpos.k, DLMain.lightsourceinvis.blockID,0 ,2);
-					worldObj.scheduleBlockUpdate(lightpos.i, lightpos.j, lightpos.k, DLMain.lightsourceinvis.blockID, DLLightSource.lightSourceTickRate);
-					}
-				}
 			}
 		}
 	}
-
-	public boolean isDynamicLightSource(int itemID)
+	
+	public boolean isholdingtorch()
 	{
-//    	Block.blocksList[itemID].lightValue>0 TODO
-		if(itemID==FCBetterThanWolves.fcBlockTorchNetherBurning.blockID || itemID==FCBetterThanWolves.fcBlockTorchFiniteBurning.blockID)
-		{
-			return true;
-		}
-		return false;
+		ItemStack held = getHeldItem();
+		if(held==null) return false;
+		int itemID = getHeldItem().itemID;
+		return itemID==FCBetterThanWolves.fcBlockTorchNetherBurning.blockID ||
+				itemID==FCBetterThanWolves.fcBlockTorchFiniteBurning.blockID ||
+				itemID==YYStuffAndThings.yyBlockTorchSparklingBurning.blockID;
 	}
-	
+
+
 	/**
 	 * Return the amount of time this entity should stay in a portal before being transported.
 	 */
@@ -538,7 +540,7 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 			--this.flyToggleTimer;
 		}
 
-		if (this.worldObj.difficultySetting == 0 && this.getHealth() < this.getMaxHealth() && this.ticksExisted % 20 * 12 == 0)
+		if (this.worldObj.difficultySetting == 0 && this.getHealth() < this.getMaxHealth() && this.ticksExisted % 20 * 10 == 0)
 		{
 			this.heal(1);
 		}
@@ -952,6 +954,19 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	 */
 	public boolean attackEntityFrom(DamageSource par1DamageSource, int par2)
 	{
+		if(("thrown".equals(par1DamageSource.getDamageType()) && par2==0) || "cactus".equals(par1DamageSource.getDamageType()))
+		{
+			par2 = 1;
+		}
+		else if(par1DamageSource.isExplosion())
+		{
+			par2 *= 4;
+		}
+		else
+		{
+			par2 = (int)(par2 * 3.5);
+		}
+		
 		if (this.isEntityInvulnerable())
 		{
 			return false;
@@ -1134,6 +1149,16 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 		}
 	}
 
+	protected int applyArmorCalculations(DamageSource source, int damage)
+	{
+		if(!source.isUnblockable())
+		{
+			this.damageArmor(damage*2/7);
+			damage = damage*(25-getTotalArmorValue())/25;
+		}
+		return damage;
+	}
+	
 	/**
 	 * Displays the furnace GUI for the passed in furnace entity. Args: tileEntityFurnace
 	 */
@@ -1997,7 +2022,7 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 			return false;
 		}
 		// END FCMOD
-		return (par1 || this.foodStats.needFood()) && !this.capabilities.disableDamage;
+		return (par1 || this.foodStats.needFood(this)) && !this.capabilities.disableDamage;
 	}
 
 	/**
@@ -2067,55 +2092,18 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 		}
 	}
 
-
 	public boolean canPlayerEdit(int par1, int par2, int par3, int par4, ItemStack par5ItemStack)
 	{
 		// FCMOD: Code added to prevent the player from placing blocks while in mid air
-		boolean disableHardcoreBouncing = false;
-
-		try {
-			Class decoManagerClass;
-
-			if (FCUtilsReflection.isObfuscated()) {
-				decoManagerClass = Class.forName("net.minecraft.src.DecoManager");
-			}
-			else {
-				decoManagerClass = Class.forName("DecoManager");
-			}
-
-			Method decoInstanceGetter = decoManagerClass.getDeclaredMethod("getInstance");
-			FCAddOn decoInstance = (FCAddOn) decoInstanceGetter.invoke(null);
-
-			Field disableHarcoreBouncingField = decoManagerClass.getDeclaredField("disableHardcoreBouncing");
-			disableHardcoreBouncing = (Boolean) disableHarcoreBouncingField.get(decoInstance);
-		} catch (ClassNotFoundException e) {
-
-		} catch (NoSuchMethodException e) {
-			e.printStackTrace();
-		} catch (SecurityException e) {
-			e.printStackTrace();
-		} catch (IllegalAccessException e) {
-			e.printStackTrace();
-		} catch (IllegalArgumentException e) {
-			e.printStackTrace();
-		} catch (InvocationTargetException e) {
-			e.printStackTrace();
-		} catch (NoSuchFieldException e) {
-			e.printStackTrace();
-		}
-		
-		if (disableHardcoreBouncing) {
-			if (!capabilities.isCreativeMode && !onGround && !inWater && !isOnLadder() && ridingEntity == null && !handleLavaMovement())
-			{
-				return false;
-			}
+		if ( !capabilities.isCreativeMode && !onGround && !inWater && !isOnLadder() && ridingEntity == null && !handleLavaMovement() )
+		{
+			return FCBetterThanWolves.allowPlaceWhileJumping;
 		}
 		// END FCMOD
-
+		
 		return this.capabilities.allowEdit ? true : (par5ItemStack != null ? par5ItemStack.func_82835_x() : false);
 	}
 
-
 	/**
 	 * Get the experience points the entity currently has.
 	 */
@@ -2164,6 +2152,13 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	 */
 	public void clonePlayer(EntityPlayer par1EntityPlayer, boolean par2)
 	{
+		this.numberOfDeaths = par1EntityPlayer.numberOfDeaths;
+		this.setMaxHealth(par1EntityPlayer.getMaxHealth());
+		this.setMaxFood(par1EntityPlayer.getMaxFood());
+		if(!par2)
+		{
+			this.numberOfDeaths++;
+		}
 		if (par2)
 		{
 			this.inventory.copyInventory(par1EntityPlayer.inventory);
@@ -2330,11 +2325,15 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	private static final int m_iSpawnChunksVisualizationLocationJDataWatcherID = 30;
 	private static final int m_iSpawnChunksVisualizationLocationKDataWatcherID = 31;
 	
+	private static final int maxHealthAndFoodDataWatcherID = 19;
+	
 	private static final int m_iTicksBetweenEmoteSounds = 10;
 	
 	public static final float m_fExhaustionJumping = 0.2F;
 	public static final float m_fExhaustionJumpingSprinting = 1.0F;
 	
+	public int numberOfDeaths = 0;
+	
 	protected void ReadModDataFromNBT( NBTTagCompound tag )
 	{
 		if ( tag.hasKey( "fcTimeOfLastSpawnAssignment" ) )
@@ -2366,6 +2365,16 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 		{
 			m_iInGloomCounter = tag.getInteger( "fcGloomCounter" );
 		}
+		
+		if(tag.hasKey("yyMaxHealth"))
+		{
+			setMaxHealth(tag.getInteger("yyMaxHealth"));
+			setMaxFood(6*getMaxHealth()/7);
+		}
+		if(tag.hasKey("yyNumberOfDeaths"))
+		{
+			numberOfDeaths = tag.getInteger("yyNumberOfDeaths");
+		}
 	}
 	
 	protected void WriteModDataToNBT( NBTTagCompound tag )
@@ -2385,6 +2394,9 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	 	
 	 	tag.setInteger( "fcGloomLevel", GetGloomLevel() );
 	 	tag.setInteger( "fcGloomCounter", m_iInGloomCounter );
+	 	
+	 	tag.setInteger("yyMaxHealth", getMaxHealth());
+	 	tag.setInteger("yyNumberOfDeaths", numberOfDeaths);
 	}
 	
 	@Override
@@ -2457,13 +2469,13 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	@Override
 	public boolean CanJump()
 	{		
-		return health > 4 && foodStats.getFoodLevel() > 12 && (int)foodStats.getSaturationLevel() < 18;
+		return this.GetHealthPenaltyLevel() <= 3 && this.GetHungerPenaltyLevel() <= 2 && this.GetFatPenaltyLevel() <= 3;
 	}
 	
 	@Override
 	public boolean CanSwim()
 	{		
-		return !isWeighted() && health > 4;
+		return !this.isWeighted() && this.GetHealthPenaltyLevel() <= 3;
 	}
 	
 	@Override
@@ -2608,7 +2620,7 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	{
 		float fModifier = GetHealthAndExhaustionModifier();
 		
-		if ( GetGloomLevel() > 0 )
+		if (GetGloomLevel() > 0 && !this.capabilities.isCreativeMode)
 		{
 			fModifier *= 0.5F;
 		}
@@ -2631,7 +2643,13 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	@Override
 	protected float GetLadderVerticalMovementModifier()
 	{
-		return GetHealthAndExhaustionModifierWithSightlessModifier();
+		float modifier = GetHealthAndExhaustionModifierWithSightlessModifier(); 
+
+		if (this.isUsingItem()) {
+			modifier *= 0.5F;
+		}
+
+		return modifier;
 	}    
 	
 	protected float GetJumpingHorizontalMovementModifier()        
@@ -2675,11 +2693,15 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	
 	public boolean HasStatusPenalty()
 	{
-		return getHealth() <= 10 || foodStats.getFoodLevel() <= 24 || (int)foodStats.getSaturationLevel() >= 12;
+		return this.GetHealthPenaltyLevel() > 0 || this.GetHungerPenaltyLevel() > 0 || this.GetFatPenaltyLevel() > 0;
 	}
 	
 	public int GetMaximumStatusPenaltyLevel()
 	{
+		if (this.capabilities.isCreativeMode) {
+			return 0;
+		}
+		
 		int iMaximumPenaltyLevel = GetHealthPenaltyLevel();
 		int iHungerPenaltyLevel = GetHungerPenaltyLevel();
 		
@@ -3170,13 +3192,16 @@ public abstract class EntityPlayer extends EntityLiving implements ICommandSende
 	protected boolean IsPlayerHoldingSail()
 	{
 		ItemStack currentItemStack = inventory.mainInventory[inventory.currentItem];
-		
-		if ( currentItemStack != null )
-		{
-			return currentItemStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID;
-		}
-		
-		return false;
+		int slot = inventory.currentItem;
+		ItemStack nextStack = inventory.getStackInSlot((slot+1)%9);
+		ItemStack prevStack = inventory.getStackInSlot((slot+8)%9);
+		
+		boolean o = inventory.getCurrentItem() != null &&
+			inventory.getCurrentItem().itemID == Item.map.itemID &&(
+				(nextStack != null && nextStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID) ||
+				(prevStack != null && prevStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID)
+			);
+		return (currentItemStack != null ? currentItemStack.itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID : false) || o;
 	}
 	
 	@Override
diff --git a/minecraft_server/net/minecraft/src/EntityPlayerMP.java b/minecraft_server/net/minecraft/src/EntityPlayerMP.java
index 3146155..dd02485 100644
--- a/minecraft_server/net/minecraft/src/EntityPlayerMP.java
+++ b/minecraft_server/net/minecraft/src/EntityPlayerMP.java
@@ -1179,14 +1179,14 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 	
 	private void UpdateHealthAndHungerEffects()
 	{
-		if ( !isDead && ( worldObj.getTotalWorldTime() + (long)entityId ) % 80L == 0L && !this.capabilities.isCreativeMode)
+		if ( !isDead && ( worldObj.getTotalWorldTime() + (long)entityId ) % 80L == 0L )
 		{
 			if ( foodStats.getFoodLevel() <= 0 && foodStats.getSaturationLevel() <= 0F )
 			{
 				addPotionEffect( new PotionEffect( Potion.confusion.getId(), 180, 0, true ) );                            
 			}
 			
-			if ( health <= 2 )
+			if ( GetHealthPenaltyLevel()>= 5 )
 			{
 				addPotionEffect( new PotionEffect( Potion.blindness.getId(), 180, 0, true ) );                            
 			}
@@ -1196,7 +1196,7 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 	@Override
 	protected void UpdateGloomState()
 	{
-		if ( !isDead && !this.capabilities.isCreativeMode)
+		if ( !isDead )
 		{
 			if ( IsInGloom() )
 			{
@@ -1252,94 +1252,26 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 	@Override
 	protected void UpdateFatPenaltyLevel()
 	{
-		int iFat = (int)foodStats.getSaturationLevel();
-		int iFatLevel = 4;
-		
-		if ( iFat < 12 || this.capabilities.isCreativeMode)
-		{
-			iFatLevel = 0;
-		}
-		else if ( iFat < 14 )
-		{
-			iFatLevel = 1;
-		}
-		else if ( iFat < 16 )
-		{
-			iFatLevel = 2;
-		}
-		else if ( iFat < 18 )
-		{
-			iFatLevel = 3;
-		}
-		
-		SetFatPenaltyLevel( iFatLevel );
+		SetFatPenaltyLevel(YYUtilsPenalties.getFatPenaltyLevel((int)foodStats.getSaturationLevel(), getMaxFood()));
 	}
 	
 	@Override
 	protected void UpdateHungerPenaltyLevel()
 	{
-		int iHunger = foodStats.getFoodLevel();
-		int iPenaltyLevel = 5;
-		
-		if ( iHunger > 24 || this.capabilities.isCreativeMode)
-		{
-			iPenaltyLevel = 0;
-		}
-		else if ( iHunger > 18 )
-		{
-			iPenaltyLevel = 1;
-		}
-		else if ( iHunger > 12 )
-		{
-			iPenaltyLevel = 2;
-		}
-		else if ( iHunger > 6 )
-		{
-			iPenaltyLevel = 3;
-		}
-		else if ( iHunger > 0 || foodStats.getSaturationLevel() > 0F )
-		{
-			iPenaltyLevel = 4;
-		}
-		
-		SetHungerPenaltyLevel( iPenaltyLevel );
+		SetHungerPenaltyLevel(YYUtilsPenalties.getHungerPenaltyLevel(foodStats.getFoodLevel(), getMaxFood()));
 	}
 	
 	@Override
 	protected void UpdateHealthPenaltyLevel()
 	{
-		int iHealth = getHealth();
-		int iPenaltyLevel = 5;
-		
-		if ( iHealth > 10 || this.capabilities.isCreativeMode)
-		{
-			iPenaltyLevel = 0;
-		}
-		else if ( iHealth > 8 )
-		{
-			iPenaltyLevel = 1;
-		}
-		else if ( iHealth > 6 )
-		{
-			iPenaltyLevel = 2;
-		}
-		else if ( iHealth > 4 )
-		{
-			iPenaltyLevel = 3;
-		}
-		else if ( iHealth > 2 )
-		{
-			iPenaltyLevel = 4;
-		}
-		
-		SetHealthPenaltyLevel( iPenaltyLevel );
+		SetHealthPenaltyLevel(YYUtilsPenalties.getHealthPenaltyLevel(getHealth(), getMaxHealth()));
 	}
 	
 	private boolean IsInGloom()
 	{
 		if ( !capabilities.disableDamage ) // disable darkness effects in creative
 		{
-			if ( !isPotionActive( Potion.nightVision ) && worldObj.provider.dimensionId == 0 )
+			if ( !isPotionActive( Potion.nightVision ) && (worldObj.provider.dimensionId == 0 || worldObj.provider.dimensionId == -1) )
 			{
 				int i = MathHelper.floor_double( posX );
 				int j = MathHelper.floor_double( posY - yOffset );
diff --git a/minecraft_server/net/minecraft/src/FoodStats.java b/minecraft_server/net/minecraft/src/FoodStats.java
index 4518192..ad848c3 100644
--- a/minecraft_server/net/minecraft/src/FoodStats.java
+++ b/minecraft_server/net/minecraft/src/FoodStats.java
@@ -2,12 +2,13 @@ package net.minecraft.src;
 
 public class FoodStats
 {
+	protected int maxFood = 60;
 	/** The player's food level. */
 	// FCMOD: Code change to increase food meter resolution
 	/*
 	private int foodLevel = 20;
 	*/
-	private int foodLevel = 60;
+	private int foodLevel = maxFood;
 	// END FCMOD
 
 	/** The player's food saturation. */
@@ -28,9 +29,15 @@ public class FoodStats
 	/*
 	private int prevFoodLevel = 20;
 	*/
-	private int prevFoodLevel = 60;
+	private int prevFoodLevel = maxFood;
 	// END FCMOD
 
+	public void setMaxFood(int maxFood)
+	{
+		maxFood = Math.min(maxFood, 120);
+		maxFood = Math.max(maxFood, 60);
+		this.maxFood = maxFood;
+	}
 	/**
 	 * Args: int foodLevel, float foodSaturationModifier
 	 */
@@ -131,17 +138,21 @@ public class FoodStats
 				foodLevel = foodLevel * 3;
 				foodSaturationLevel = 0F;
 			}
+			if (par1NBTTagCompound.hasKey("yyMaxFood"))
+			{
+				maxFood = par1NBTTagCompound.getInteger("yyMaxFood");
+			}
 			
 			// sanity check the values as apparently they can get fucked up when importing from vanilla
 			
-			if ( foodLevel > 60 || foodLevel < 0 )
+			if ( foodLevel > maxFood || foodLevel < 0 )
 			{
-				foodLevel = 60;
+				foodLevel = maxFood;
 			}
 			
-			if ( foodSaturationLevel > 20F || foodSaturationLevel < 0F )
+			if ( foodSaturationLevel > maxFood/3F || foodSaturationLevel < 0F )
 			{
-				foodSaturationLevel = 20F;
+				foodSaturationLevel = maxFood/3F;
 			}
 			// END FCMOD
 		}
@@ -159,6 +170,8 @@ public class FoodStats
 		
 		// FCMOD: Code added
 		par1NBTTagCompound.setBoolean( "fcFoodLevelAdjusted", true );
+		
+		par1NBTTagCompound.setInteger("yyMaxFood", maxFood);
 		// END FCMOD
 	}
 
@@ -173,16 +186,15 @@ public class FoodStats
 	/**
 	 * Get whether the player must eat food.
 	 */
-	public boolean needFood()
+	public boolean needFood(EntityPlayer player)
 	{
 		// FCMOD: Code changed
 		/*
 		return this.foodLevel < 20;
 		*/
-		return this.foodLevel < 60;    	
+		return this.foodLevel < player.getMaxFood();
 		// END FCMOD
 	}
-
 	/**
 	 * adds input to foodExhaustionLevel to a max of 40
 	 */
@@ -219,7 +231,7 @@ public class FoodStats
 	{
 		int iPreviousFoodLevel = foodLevel;
 		
-		foodLevel = Math.min( iFoodGain + foodLevel, 60);
+		foodLevel = Math.min( iFoodGain + foodLevel, maxFood);
 		
 		int iExcessFood = iFoodGain - ( foodLevel - iPreviousFoodLevel );
 		
@@ -264,13 +276,13 @@ public class FoodStats
 			foodExhaustionLevel = 0F;
 		}
 
-		if ( foodLevel > 24 && player.shouldHeal() )
+		if ( player.GetHungerPenaltyLevel() == 0 && player.shouldHeal() )
 		{
 			++foodTimer;
 
-			if ( foodTimer >= 600 ) // once every 30 seconds
+			if ( foodTimer >= 1800 ) // once every 30 seconds
 			{
-				player.heal( 1 );
+				//player.heal( 1 );
 				foodTimer = 0;
 			}
 		}
diff --git a/minecraft_server/net/minecraft/src/ItemMap.java b/minecraft_server/net/minecraft/src/ItemMap.java
index 3b6ec1d..1924dc8 100644
--- a/minecraft_server/net/minecraft/src/ItemMap.java
+++ b/minecraft_server/net/minecraft/src/ItemMap.java
@@ -302,8 +302,21 @@ public class ItemMap extends ItemMapBase
 				EntityPlayer var7 = (EntityPlayer)par3Entity;
 				var6.updateVisiblePlayers(var7, par1ItemStack);
 			}
-
-			if (par5)
+			
+			InventoryPlayer inventory = par3Entity.inventory;
+			int slot = inventory.currentItem;
+			ItemStack nextStack = inventory.getStackInSlot((slot+1)%9);
+			ItemStack prevStack = inventory.getStackInSlot((slot+8)%9);
+			boolean o =
+				par3Entity.ridingEntity instanceof EntityBoat &&
+				inventory.getCurrentItem() != null &&
+				inventory.getCurrentItem().itemID == FCBetterThanWolves.fcItemWindMillBlade.itemID &&
+				(
+					(nextStack != null && this.itemID == nextStack.itemID) ||
+					(prevStack != null && this.itemID == prevStack.itemID)
+					);
+
+			if (par5 || o)
 			{
 				this.updateMapData(par2World, par3Entity, var6);
 			}
diff --git a/minecraft_server/net/minecraft/src/Potion.java b/minecraft_server/net/minecraft/src/Potion.java
index b8993c8..2659659 100644
--- a/minecraft_server/net/minecraft/src/Potion.java
+++ b/minecraft_server/net/minecraft/src/Potion.java
@@ -122,7 +122,7 @@ public class Potion
 		}
 		else if (this.id == poison.id)
 		{
-			if (par1EntityLiving.getHealth() > 1)
+			if (par1EntityLiving.getHealth() > 3 || !(par1EntityLiving instanceof EntityPlayer) && par1EntityLiving.getHealth() > 1)
 			{
 				par1EntityLiving.attackEntityFrom(DamageSource.magic, 1);
 			}
@@ -155,7 +155,12 @@ public class Potion
 		}
 		else if ( this.id == heal.id )
 		{
-			par1EntityLiving.heal(6 << par2);
+			int h = 6 << par2;
+			if(par1EntityLiving instanceof EntityPlayer)
+			{
+				h = h*7/2;
+			}
+			par1EntityLiving.heal(h);
 		}
 		// END FCMOD
 	}
@@ -204,6 +209,10 @@ public class Potion
 		// END FCMOD        
 		{
 			var6 = (int)(par4 * (double)(6 << par3) + 0.5D);
+			if(par1EntityLiving instanceof EntityPlayer)
+			{
+				var6 = var6*7/2;
+			}
 			par2EntityLiving.heal(var6);
 		}
 	}
@@ -241,6 +250,20 @@ public class Potion
 			return var3 > 0 ? par1 % var3 == 0 : true;
 		}
 	}
+	
+	public boolean isReady(int par1, int par2, EntityLiving entity)
+	{
+		if(this.id == regeneration.id && entity instanceof EntityPlayer)
+		{
+			int var3 = 25 >> par2;
+			var3 = var3*2/7;
+			return var3 > 0 ? par1 % var3 == 0 : true;
+		}
+		else
+		{
+			return isReady(par1, par2);
+		}
+	}
 
 	/**
 	 * Set the potion name.
diff --git a/minecraft_server/net/minecraft/src/PotionEffect.java b/minecraft_server/net/minecraft/src/PotionEffect.java
index 23bd414..bd079fd 100644
--- a/minecraft_server/net/minecraft/src/PotionEffect.java
+++ b/minecraft_server/net/minecraft/src/PotionEffect.java
@@ -111,7 +111,7 @@ public class PotionEffect
 	{
 		if (this.duration > 0)
 		{
-			if (Potion.potionTypes[this.potionID].isReady(this.duration, this.amplifier))
+			if (Potion.potionTypes[this.potionID].isReady(this.duration, this.amplifier, par1EntityLiving))
 			{
 				this.performEffect(par1EntityLiving);
 			}
diff --git a/minecraft_server/net/minecraft/src/SpawnerAnimals.java b/minecraft_server/net/minecraft/src/SpawnerAnimals.java
index 0fc2659..0862737 100644
--- a/minecraft_server/net/minecraft/src/SpawnerAnimals.java
+++ b/minecraft_server/net/minecraft/src/SpawnerAnimals.java
@@ -325,6 +325,7 @@ public final class SpawnerAnimals
 							}
 
 							// FCMOD: Added
+							((EntityAnimal)var21).hasInteractedWithPlayer=false;
 							var21.PreInitCreature();
 							// END FCMOD
 							var21.setLocationAndAngles((double)var18, (double)var19, (double)var20, par6Random.nextFloat() * 360.0F, 0.0F);
diff --git a/minecraft_server/net/minecraft/src/Teleporter.java b/minecraft_server/net/minecraft/src/Teleporter.java
index 928b9bf..ddb534a 100644
--- a/minecraft_server/net/minecraft/src/Teleporter.java
+++ b/minecraft_server/net/minecraft/src/Teleporter.java
@@ -73,7 +73,7 @@ public class Teleporter
 	 */
 	public boolean placeInExistingPortal(Entity par1Entity, double par2, double par4, double par6, float par8)
 	{
-		short var9 = 128;
+		int var9 = par1Entity.dimension==-1 ? 20 : 160;
 		double var10 = -1.0D;
 		int var12 = 0;
 		int var13 = 0;
diff --git a/minecraft_server/net/minecraft/src/WorldGenFire.java b/minecraft_server/net/minecraft/src/WorldGenFire.java
index 7743bc7..b5910f0 100644
--- a/minecraft_server/net/minecraft/src/WorldGenFire.java
+++ b/minecraft_server/net/minecraft/src/WorldGenFire.java
@@ -6,18 +6,6 @@ public class WorldGenFire extends WorldGenerator
 {
 	public boolean generate(World par1World, Random par2Random, int par3, int par4, int par5)
 	{
-		for (int var6 = 0; var6 < 64; ++var6)
-		{
-			int var7 = par3 + par2Random.nextInt(8) - par2Random.nextInt(8);
-			int var8 = par4 + par2Random.nextInt(4) - par2Random.nextInt(4);
-			int var9 = par5 + par2Random.nextInt(8) - par2Random.nextInt(8);
-
-			if (par1World.isAirBlock(var7, var8, var9) && par1World.getBlockId(var7, var8 - 1, var9) == Block.netherrack.blockID)
-			{
-				par1World.setBlock(var7, var8, var9, Block.fire.blockID, 0, 2);
-			}
-		}
-
 		return true;
 	}
 }
diff --git a/minecraft_server/net/minecraft/src/WorldProviderHell.java b/minecraft_server/net/minecraft/src/WorldProviderHell.java
index d9c3bf5..5066218 100644
--- a/minecraft_server/net/minecraft/src/WorldProviderHell.java
+++ b/minecraft_server/net/minecraft/src/WorldProviderHell.java
@@ -28,32 +28,7 @@ public class WorldProviderHell extends WorldProvider
 	 */
 	public Vec3 getFogColor(float par1, float par2, int x, int y, int z)
 	{
-		BiomeGenBase biome =  this.worldObj.getBiomeGenForCoords(x, z);
-		
-		if (biome instanceof BTABiomeGenNetherBase) {
-			Vec3[][] biomeColors = new Vec3[5][5];
-			
-			for (int i = 0; i < 5; i++) {
-				for (int j = 0; j < 5; j++) {
-					biomeColors[i][j] = ((BTABiomeGenNetherBase) this.worldObj.getBiomeGenForCoords(x - 2 + i, z - 2 + j)).getFogColor(this.worldObj);
-				}
-			}
-			
-			Vec3 color = this.worldObj.getWorldVec3Pool().getVecFromPool(0, 0, 0);
-			
-			for (int i = 0; i < 5; i++) {
-				for (int j = 0; j < 5; j++) {
-					color.xCoord += biomeColors[i][j].xCoord / 25;
-					color.yCoord += biomeColors[i][j].yCoord / 25;
-					color.zCoord += biomeColors[i][j].zCoord / 25;
-				}
-			}
-			
-			return color;
-		}
-		else {
-			return this.worldObj.getWorldVec3Pool().getVecFromPool(0.2, 0.03, 0.03);
-		}
+		return this.worldObj.getWorldVec3Pool().getVecFromPool(0.0, 0.0, 0.0);
 	}
 
 	/**
@@ -61,7 +36,7 @@ public class WorldProviderHell extends WorldProvider
 	 */
 	protected void generateLightBrightnessTable()
 	{
-		float var1 = 0.1F;
+		float var1 = 0.0F;
 
 		for (int var2 = 0; var2 <= 15; ++var2)
 		{
